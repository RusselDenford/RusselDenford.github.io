function getMap (numOfStage) {
	switch (numOfStage) {
		case 1: {
			return [
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0],
	    	[0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0],
	    	[0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0],
	    	[0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0],
	    	[0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 2, 2, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0],
	    	[0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 2, 2, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0],
	    	[0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0],
	    	[0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0],
	    	[0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1],
	    	[2, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 2, 2],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0],
	    	[0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0],
	    	[0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0],
	    	[0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0],
	    	[0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0],
	    	[0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0],
	    	[0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
	    	];
	    	break;
		}

		case 2: {
			return [
	    	[0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 1, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0],
	    	[0, 0, 1, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0],
	    	[0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 2, 2, 1, 1, 0, 0],
	    	[0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 2, 2, 1, 1, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0],
	    	[3, 3, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 1, 1, 3, 3, 1, 1, 2, 2],
	    	[3, 3, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 1, 1, 3, 3, 1, 1, 2, 2],
	    	[3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 2, 2, 0, 0, 3, 3, 0, 0, 0, 0],
	    	[3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 2, 2, 0, 0, 3, 3, 0, 0, 0, 0],
	    	[0, 0, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 2, 2, 0, 0, 0, 0, 3, 3, 1, 1, 0, 0],
	    	[0, 0, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 2, 2, 0, 0, 0, 0, 3, 3, 1, 1, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 2, 2, 3, 3, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 2, 2, 3, 3, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0],
	    	[2, 2, 1, 1, 0, 0, 2, 2, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0],
	    	[2, 2, 1, 1, 0, 0, 2, 2, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0],
	    	[0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 2, 2, 1, 1, 0, 0],
	    	[0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 2, 2, 1, 1, 0, 0],
	    	[0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0],
	    	[0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0],
	    	[0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
	    	[0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0]
	    	];
	    	break;
		}

		case 3: {
			return [
			[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 3, 3, 3, 3, 3, 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 3, 3, 3, 3, 3, 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2],
	    	[1, 1, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[1, 1, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0],
	    	[3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0],
	    	[3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0],
	    	[3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0],
	    	[3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
	    	[3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
	    	[0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 3, 3, 0, 0],
	    	[0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 3, 3, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3],
	    	[0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3],
	    	[1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3],
	    	[1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3],
	    	[1, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 0, 0],
	    	[1, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0],
	    	[1, 1, 1, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0],
	    	[1, 1, 1, 1, 0, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0],
	    	[2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
	    	[2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0]
			];
			break;
		}

		case 4: {
			return [
			[0, 0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0],
	    	[0, 0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0],
	    	[3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3],
	    	[3, 3, 3, 3, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 3, 3],
	    	[3, 3, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2],
	    	[3, 3, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],
	    	[2, 2, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0],
	    	[4, 4, 0, 0, 0, 1, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
	    	[4, 4, 0, 0, 0, 1, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4],
	    	[0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4],
	    	[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
	    	[0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 3, 3],
	    	[0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 3, 3],
	    	[3, 3, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 3, 3, 3, 3],
	    	[3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3],
	    	[2, 2, 3, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 3, 3, 3, 3, 2, 2],
	    	[2, 2, 3, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 3, 3, 3, 3, 2, 2]
			];
		}

		case 5: {
			return [
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1],
	    	[0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 2],
	    	[0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 1, 1, 0, 0, 2, 2, 2, 0, 1, 1, 0, 0],
	    	[0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 4, 4, 0, 0, 1, 1, 0, 0, 2, 2, 2, 0, 1, 1, 0, 0],
	    	[1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 1, 1, 1, 1, 0, 0],
	    	[1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 1, 1, 1, 1, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 4, 4, 0, 0, 0, 0, 0, 0, 4, 4, 2, 2, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 4, 4, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0],
	    	[4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 1, 1, 1, 1, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0],
	    	[4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 1, 1, 1, 1, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0],
	    	[1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 1, 1, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1],
	    	[0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1],
	    	[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1],
	    	[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
	    	];
	    	break;
		}

		case 6: {
			return [
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 1, 0, 0, 1, 3, 3],
	    	[0, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 1, 0, 0, 1, 3, 3],
	    	[0, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 3, 3, 1, 0, 0, 1, 3, 3],
	    	[0, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 3, 3, 1, 0, 0, 1, 3, 3],
	    	[0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 2, 0, 0, 1, 1, 3, 3, 0, 0, 1, 1, 3, 3],
	    	[0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 2, 0, 0, 1, 1, 3, 3, 0, 0, 1, 1, 3, 3],
	    	[0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 0, 1, 1, 0, 0, 1, 1, 2, 0, 0, 0, 3, 3, 3, 3],
	    	[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 2, 0, 0, 0, 3, 3, 3, 3],
	    	[1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 1, 3, 3, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1],
	    	[1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 1, 1, 3, 3, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 3, 3, 3, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 3, 3, 3, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 3, 3, 3, 3, 3, 3, 1, 1, 0, 1, 1, 1, 1, 1, 2, 2],
	    	[2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2],
	    	[2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 3, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 3, 3],
	    	[0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 3, 3],
	    	[0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3],
	    	[0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 3, 3, 3, 3]
			];
		}

		case 7: {
			return [
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0],
	    	[0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0],
	    	[0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0],
	    	[0, 0, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 2, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 2, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0],
	    	[2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 0, 0],
	    	[2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 0, 0],
	    	[0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 2, 2, 0, 0],
	    	[0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 2, 2, 0, 0],
	    	[0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0],
	    	[0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0],
	    	[0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 2, 2],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			];
		}

		case 8: {
			return [
			[0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
	    	[3, 3, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0],
	    	[3, 3, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 2, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0],
	    	[3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0],
	    	[3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0],
	    	[3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4],
	    	[3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4],
	    	[0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2],
	    	[0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
	    	[1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 3, 3, 1, 1, 0, 0, 0, 0, 1, 1],
	    	[1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 3, 3, 1, 1, 2, 2, 2, 2, 1, 1],
	    	[0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 2, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0],
	    	[4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[3, 3, 3, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[3, 3, 3, 3, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[3, 3, 3, 3, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0],
	    	[3, 3, 3, 3, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 2, 1, 1, 1, 1, 0, 0],
	    	[3, 3, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0],
	    	[3, 3, 2, 2, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0]
			];
		}

		case 9: {
			return [
			[0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 3, 0, 0, 0, 0],
	    	[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 2, 2, 2, 2, 0, 0, 0, 1, 1],
	    	[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 3, 0, 2, 2, 2, 2, 0, 0, 0, 1, 1],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 2, 2, 2, 2, 0, 0, 0, 2, 2, 3, 3, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 2, 2, 3, 3, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 2, 2, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 2, 2, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 3, 3, 0, 0, 3, 3, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 3, 3, 2, 2, 3, 3, 0, 0, 3, 3, 2, 2, 3, 3, 0, 0, 0, 0, 0, 0],
	    	[2, 2, 1, 1, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 1, 1, 2, 2],
	    	[2, 2, 1, 1, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 1, 1, 2, 2],
	    	[0, 0, 0, 0, 0, 0, 3, 3, 2, 2, 3, 3, 0, 0, 3, 3, 2, 2, 3, 3, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 3, 3, 0, 0, 3, 3, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 1, 1],
	    	[1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 1, 1],
	    	[1, 1, 0, 0, 0, 0, 3, 3, 2, 2, 3, 3, 0, 0, 3, 3, 2, 2, 3, 3, 0, 0, 0, 0, 1, 1],
	    	[1, 1, 0, 0, 0, 0, 3, 3, 0, 0, 3, 3, 0, 0, 3, 3, 0, 0, 3, 3, 0, 0, 0, 0, 1, 1],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0]
			];
		}

		case 10: {
			return [
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
	    	[0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 1, 1, 1, 1, 0, 0],
	    	[0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 1, 1, 1, 1, 0, 0],
	    	[0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0],
	    	[0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0],
	    	[5, 5, 5, 5, 5, 5, 2, 0, 1, 1, 0, 0, 0, 0, 1, 1, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0],
	    	[5, 5, 5, 5, 5, 5, 2, 0, 1, 1, 0, 0, 0, 0, 1, 1, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0],
	    	[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0],
	    	[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 2, 5, 5, 5, 5, 5, 5, 5, 5, 1, 1, 0, 1, 1, 0, 0, 0, 2, 2, 2, 2],
	    	[0, 0, 0, 0, 0, 2, 5, 5, 5, 5, 5, 5, 5, 5, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0],
	    	[1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 1, 1, 1],
	    	[1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 1, 1, 1],
	    	[0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 5, 5, 5, 5, 5, 5, 5, 5, 2, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 5, 5, 5, 5, 5, 5, 5, 5, 2, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 5, 5, 5, 5, 5, 5, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0],
	    	[0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 5, 5, 5, 5, 5, 5, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0],
	    	[5, 5, 5, 5, 5, 5, 1, 1, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0],
	    	[5, 5, 5, 5, 5, 5, 1, 1, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0],
	    	[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0],
	    	[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0],
	    	[1, 1, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
	    	[1, 1, 5, 5, 5, 5, 5, 5, 5, 5, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
	    	[1, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0],
	    	[1, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0]
	    	];
	    	break;
		}

		case 11: {
			return [
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0],
	    	[0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 3, 3, 3, 3, 3, 3],
	    	[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 3, 3, 3, 3, 3, 3],
	    	[0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3],
	    	[0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3],
	    	[0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 3, 3, 3, 3, 1, 1, 2, 2],
	    	[0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 3, 3, 3, 3, 0, 0, 2, 2],
	    	[0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 0, 0, 0, 0, 1, 1, 0, 0, 3, 3, 3, 3, 0, 0, 0, 1],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 1, 1, 0, 0, 3, 3, 3, 3, 0, 0, 0, 1],
	    	[0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0],
	    	[0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 0, 0],
	    	[2, 2, 1, 1, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 3, 3, 3, 3, 3, 3, 1, 1, 0, 0],
	    	[2, 2, 1, 1, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 3, 3, 3, 3, 3, 3, 1, 1, 0, 0],
	    	[0, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0],
	    	[0, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0],
	    	[0, 0, 1, 1, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 1, 1, 1, 0, 0],
	    	[0, 0, 1, 1, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
	    	[0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0],
	    	[0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0],
	    	[0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 1, 1, 3, 3, 3, 3, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			];
		}

		case 12: {
			return [
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],
	    	[0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],
	    	[0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0],
	    	[0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0],
	    	[0, 0, 2, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1],
	    	[0, 0, 2, 2, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1],
	    	[0, 0, 1, 1, 0, 0, 1, 0, 3, 3, 0, 0, 2, 2, 0, 0, 3, 3, 0, 1, 0, 0, 2, 2, 1, 1],
	    	[0, 0, 1, 1, 0, 0, 1, 0, 3, 3, 2, 2, 2, 2, 2, 2, 3, 3, 0, 1, 0, 0, 2, 2, 1, 1],
	    	[0, 0, 1, 1, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 2, 2, 1, 1],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 1, 1],
	    	[1, 1, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 1, 1],
	    	[1, 1, 2, 2, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 1, 1, 1, 1],
	    	[1, 1, 2, 2, 0, 0, 1, 0, 3, 3, 2, 2, 2, 2, 2, 2, 3, 3, 0, 1, 0, 0, 1, 1, 0, 0],
	    	[1, 1, 2, 2, 0, 0, 1, 0, 3, 3, 0, 0, 2, 2, 0, 0, 3, 3, 0, 1, 0, 0, 1, 1, 0, 0],
	    	[1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 2, 0, 0],
	    	[1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 2, 2, 0, 0],
	    	[1, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0],
	    	[1, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0],
	    	[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2],
	    	[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2],
	    	[1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0],
	    	[1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0],
	    	[1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			];
		}

		case 13: {
			return [
			[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 3, 3, 3, 3, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 3, 3, 3, 3, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
	    	[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
	    	[3, 3, 2, 2, 1, 1, 3, 3, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 2, 2],
	    	[3, 3, 0, 0, 1, 1, 3, 3, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 2, 2],
	    	[3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 3, 3, 2, 2, 3, 3, 3, 3, 1, 1, 2, 0, 1, 1, 0, 0],
	    	[3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 3, 3, 0, 0, 3, 3, 3, 3, 1, 1, 2, 0, 1, 1, 0, 0],
	    	[0, 0, 3, 3, 3, 3, 1, 1, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 0, 0, 1, 1, 0, 0],
	    	[0, 0, 3, 3, 3, 3, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 0, 0, 1, 1, 0, 0],
	    	[0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 1, 1, 1, 1, 1, 0, 3, 3, 3, 3],
	    	[0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 1, 1, 1, 1, 1, 0, 3, 3, 3, 3],
	    	[0, 2, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 3, 3],
	    	[0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3],
	    	[0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 3, 3, 3, 3, 1, 1, 1, 0, 3, 3],
	    	[0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 2, 2, 1, 1, 0, 0, 3, 3, 3, 3, 1, 1, 1, 0, 3, 3],
	    	[0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 3, 3, 3, 3, 1, 1, 0, 0, 0, 0, 3, 3],
	    	[0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 3, 3, 3, 3, 1, 1, 0, 0, 0, 0, 3, 3],
	    	[0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 3, 3, 3, 3, 0, 0, 3, 3, 1, 1, 3, 3, 3, 3],
	    	[0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 3, 3, 3, 3, 1, 1, 3, 3, 1, 1, 3, 3, 3, 3],
	    	[0, 0, 0, 0, 1, 1, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 1, 1, 3, 3, 1, 1, 3, 3, 0, 0],
	    	[0, 0, 0, 0, 1, 1, 0, 0, 3, 3, 0, 1, 1, 1, 1, 0, 1, 1, 3, 3, 0, 0, 3, 3, 0, 0],
	    	[0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0]
			];
		}

		case 14: {
			return [
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 3, 3, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 3, 3, 0, 0],
	    	[0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 2, 2, 0, 0],
	    	[0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 2, 2, 0, 0],
	    	[1, 1, 3, 3, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 0, 0],
	    	[1, 1, 3, 3, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 0, 0],
	    	[0, 0, 1, 1, 3, 3, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 3, 3, 1, 1, 2, 2, 2, 2, 0, 0],
	    	[0, 0, 1, 1, 3, 3, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 3, 3, 1, 1, 2, 2, 2, 2, 0, 0],
	    	[0, 0, 0, 0, 1, 1, 0, 0, 3, 3, 2, 2, 1, 1, 3, 3, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 1, 1, 0, 0, 3, 3, 2, 2, 1, 1, 3, 3, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 1, 1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 1, 1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 2, 2, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 2, 2, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[2, 2, 2, 2, 2, 2, 3, 3, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
	    	[2, 2, 2, 2, 2, 2, 3, 3, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
	    	[2, 2, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 0, 0, 0, 0],
	    	[2, 2, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 0, 0, 0, 0],
	    	[2, 2, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 1, 0, 0],
	    	[2, 2, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 1, 0, 0],
	    	[3, 3, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2],
	    	[3, 3, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2]
			];
		}

		case 15: {
			return [
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 2, 2, 3, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 2, 2, 3, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 3, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 3, 3, 3, 3, 0, 0, 0, 3, 3, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 3, 3, 3, 3, 0, 0, 0, 3, 3, 0, 0, 3, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 3, 3, 0, 0, 3, 3, 0, 3, 3, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 3, 3, 0, 0, 3, 3, 0, 3, 3, 0, 0, 0, 0, 3, 3, 1, 1, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 3, 3, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 3, 3, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 2, 2, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0],
	    	[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 2, 2],
	    	[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 2, 2],
	    	[1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3],
	    	[1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3],
	    	[2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3],
	    	[2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3],
	    	[2, 2, 2, 2, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 3, 3, 0, 0, 0, 0, 3, 3, 3, 3],
	    	[2, 2, 2, 2, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 3, 3, 0, 0, 0, 0, 3, 3, 3, 3]
			];
		}

		default: {
			return [
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	    	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			];
		}
	}
}
function getBotSquad (numOfStage, numOfEnemy) {
	var squad = [];
	switch (numOfStage) {
		case 1: {
			for (var i = 0; i < numOfEnemy; i++) {
				if (i < 18) squad.push("simple");
				if (i >=18) squad.push("btr");
			}
			return squad;
			break;
		}
		case 2: {
			for (var i = 0; i < numOfEnemy; i++) {
				if (i < 2) squad.push("heavy");
				if (i >= 2 && i < 8) squad.push("btr");
				if (i >= 8 && i < 10) squad.push("bursting");
				if (i >= 10 && i < 12) squad.push("btr");
				if (i >= 12 && i < 14) squad.push("bursting");
				if (i >= 14 && i < 16) squad.push("heavy");
				if (i >= 16 && i < 18) squad.push("btr");
				if (i >= 18) squad.push("simple");
			}
			return squad;
			break;
		}

		case 3: {
			for (var i = 0; i < numOfEnemy; i++) {
				if (i < 14) squad.push("simple");
				if (i >= 14 && i < 18) squad.push("btr");
				if (i >= 18) squad.push("bursting");
			}
			return squad;
			break;
		}

		case 4: {
			for (var i = 0; i < numOfEnemy; i++) {
				if (i < 10) squad.push("bursting");
				if (i >= 10 && i < 16) squad.push("btr");
				if (i >= 16) squad.push("simple");
			}
			return squad;
			break;
		}
		case 5: {
			for (var i = 0; i < numOfEnemy; i++) {
				if (i < 8) squad.push("bursting");
				if (i >=8 && i < 10) squad.push("heavy");
				if (i >= 10 && i < 16) squad.push("btr");
				if (i >= 16) squad.push("simple");
			}
			return squad;
			break;
		}
		case 6: {
			for (var i = 0; i < numOfEnemy; i++) {
				if (i < 6) squad.push("bursting");
				if (i >=6 && i < 10) squad.push("heavy");
				if (i >= 10 && i < 16) squad.push("btr");
				if (i >= 16 && i < 18) squad.push("simple");
				if (i >= 18) squad.push("btr");
			}
			return squad;
			break;
		}
		case 7: {
			for (var i = 0; i < numOfEnemy; i++) {
				if (i < 2) squad.push("simple");
				if (i >=2 && i < 3) squad.push("heavy-btr");
				if (i == 3) squad.push("btr");
				if (i >=4 && i < 8) squad.push("bursting");
				if (i >= 8 && i < 12) squad.push("simple");
				if (i >= 12 && i < 16) squad.push("btr");
				if (i >= 16) squad.push("bursting");
			}
			return squad;
			break;
		}
		case 8: {
			for (var i = 0; i < numOfEnemy; i++) {
				if (i < 4) squad.push("heavy");
				if (i >=4 && i < 6) squad.push("heavy-btr");
				if (i >= 6 && i < 10) squad.push("bursting");
				if (i >= 10 && i < 12) squad.push("btr");
				if (i >= 12 && i < 16) squad.push("simple");
				if (i >= 16) squad.push("bursting");
			}
			return squad;
			break;
		}
		case 9: {
			for (var i = 0; i < numOfEnemy; i++) {
				if (i < 2) squad.push("btr");
				if (i >=2 && i < 6) squad.push("simple");
				if (i >= 6 && i < 8) squad.push("heavy-btr");
				if (i >= 8 && i < 12) squad.push("bursting");
				if (i >= 12 && i < 14) squad.push("heavy");
				if (i >= 14 && i < 18) squad.push("simple");
				if (i >= 18) squad.push("heavy");
			}
			return squad;
			break;
		}

		case 10: {
			for (var i = 0; i < numOfEnemy; i++) {
				if (i < 2) squad.push("btr");
				if (i >=2 && i < 6) squad.push("heavy");
				if (i >= 6 && i < 8) squad.push("bursting");
				if (i >= 8 && i < 12) squad.push("btr");
				if (i >= 12 && i < 18) squad.push("bursting");
				if (i >= 18) squad.push("heavy-btr");
			}
			return squad;
			break;
		}

		case 11: {
			for (var i = 0; i < numOfEnemy; i++) {
				if (i < 2) squad.push("bursting");
				if (i >=2 && i < 4) squad.push("bursting-heavy");
				if (i >= 4 && i < 8) squad.push("btr");
				if (i >= 8 && i < 12) squad.push("simple");
				if (i >= 12 && i < 18) squad.push("bursting");
				if (i >= 18) squad.push("heavy-btr");
			}
			return squad;
			break;
		}

		case 12: {
			for (var i = 0; i < numOfEnemy; i++) {
				if (i < 8) squad.push("simple");
				if (i >= 8 && i < 10) squad.push("bursting");
				if (i >=10 && i < 14) squad.push("heavy-btr");
				if (i >= 14 && i < 16) squad.push("heavy");
				if (i >= 16 && i < 18) squad.push("bursting-heavy");
				if (i >= 18) squad.push("heavy");
			}
			return squad;
			break;
		}

		case 13: {
			for (var i = 0; i < numOfEnemy; i++) {
				if (i < 4) squad.push("heavy");
				if (i >= 4 && i < 6) squad.push("btr");
				if (i >= 6 && i < 8) squad.push("heavy-btr");
				if (i >= 8 && i < 10) squad.push("bursting");
				if (i >= 10 && i < 12) squad.push("bursting-heavy");
				if (i >= 12 && i < 16) squad.push("heavy");
				if (i >= 16 && i < 18) squad.push("btr");
				if (i >= 18) squad.push("heavy-btr");
			}
			return squad;
			break;
		}

		case 14: {
			for (var i = 0; i < numOfEnemy; i++) {
				if (i < 4) squad.push("heavy");
				if (i >= 4 && i < 6) squad.push("btr");
				if (i >= 6 && i < 8) squad.push("heavy-btr");
				if (i >= 8 && i < 10) squad.push("bursting");
				if (i >= 10 && i < 12) squad.push("bursting-heavy");
				if (i >= 12 && i < 16) squad.push("heavy");
				if (i >= 16 && i < 18) squad.push("btr");
				if (i >= 18) squad.push("heavy-btr");
			}
			return squad;
			break;
		}

		case 15: {
			for (var i = 0; i < numOfEnemy; i++) {
				if (i < 2) squad.push("heavy");
				if (i >= 2 && i < 4) squad.push("heavy-btr");
				if (i >= 4 && i < 6) squad.push("heavy");
				if (i >= 6 && i < 8) squad.push("bursting-heavy");
				if (i >= 10 && i < 12) squad.push("heavy-btr");
				if (i >= 12 && i < 14) squad.push("heavy");
				if (i >= 14 && i < 18) squad.push("heavy-btr");
				if (i >= 18) squad.push("bursting-heavy");
			}
			return squad;
			break;
		}

		default: {
			for (var i = 0; i < numOfEnemy; i++) {
				squad.push("simple");
			}
			return squad;
		}
	}
}
var resources = {
	resArr: [],
	loadFile: function (src) {
		return loadFile(src);
	},
	getFile: function (type, src) {
		return getFile(type, src);
	}
}

function getFile (type, src) {
	var i, img;
	for (i = 0; i < resources.resArr.length; i++) {
		if (resources.resArr[i].src == src)
			return resources.resArr[i].file;
	}

	loadFile(type, src);
	return getFile(type, src);
}

function loadFile (type, src) {
	var file;
	switch (type) {
		case "img": {
			file = new Image();
			break;
		}

		case "audio": {
			file = new Audio();
			break;
		}
		default: {}
	}

	file.src = src;
	resources.resArr.push({src: src, file: file});
}


(function () {
	var key, pressedKey = {};

	document.addEventListener('keydown', function(e) {
		setStatus(e, true);
	});

	document.addEventListener('keyup', function(e) {
		setStatus(e, false);
	});

	function setStatus (event, status) {
		var code = event.keyCode;

		switch(code) {
			case 27: {
				event.preventDefault();
				key = "ESC";
				break;
			}
			case 32: {
				event.preventDefault();
				key = "SPACE";
				break;
			}
			case 37: {
				event.preventDefault();
				key = "LEFT";
				break;
			}
			case 38: {
				event.preventDefault();
				key = "UP";
				break;
			}
			case 39: {
				event.preventDefault();
				key = "RIGHT";
				break;
			}
			case 40: {
				event.preventDefault();
				key = "DOWN";
				break;
			}
			default: {
				key = String.fromCharCode(code);
			}
		}
		pressedKey[key] = status;
		if(status) {
			window.input.pressedKey = key;
		}
		if(!status) {
			window.input.unpressedKey = key;
			window.input.pressedKey = "";
		}
	}
	window.input = {
		isDown: function (key) {
			return pressedKey[key];
		},
		pressed: false
	};
})();
function GameObjs (pos) {
	this.collision = true;
	this.frameIndex = 0;
}

GameObjs.prototype.isCollideWith = function (obj) {
	if(obj instanceof Bullet && this instanceof Bullet) {
		var size = 14;
		return this.pos.x - 6 < obj.pos.x + size && 
		   this.pos.x + size > obj.pos.x - 6 && 
		   this.pos.y - 6 < obj.pos.y + size && 
		   this.pos.y + size > obj.pos.y - 6;
	}
	if (obj && this) 
		return this.pos.x <= obj.pos.x + obj.width && 
		   this.pos.x + this.width >= obj.pos.x && 
		   this.pos.y <= obj.pos.y + obj.height && 
		   this.pos.y + this.height >= obj.pos.y;
	else return false;
};

GameObjs.prototype.setCollisionWith = function (obj) {
	var x1, x2, y1, y2;
	var iceStart = (obj instanceof Block && obj.type == "ice") ? 22 : 0;
	if (obj && this) {
		x1 = this.pos.x;
		x2 = this.pos.x + this.width;
		y1 = this.pos.y;
		y2 = this.pos.y + this.height;
		switch (this.dir) {
			case "UP": {
				if (obj.pos.y + obj.height - iceStart >= y1 &&
				obj.pos.y - iceStart <= y1 && obj.pos.x < x2 &&
				obj.pos.x + obj.width > x1) {
					if (obj.collision) this.speed.up = 0;
					return true;
				}
				break;
			}
			case "LEFT": {
				if (obj.pos.x + obj.width - iceStart >= x1 &&
				obj.pos.x - iceStart <= x1 && obj.pos.y < y2 &&
				obj.pos.y + obj.height > y1) {
					if (obj.collision) this.speed.left = 0;
					return true;
				}
				break;
			}
			case "RIGHT": {
				if (obj.pos.x + obj.width + iceStart >= x2 &&
				obj.pos.x + iceStart <= x2 && obj.pos.y < y2 &&
				obj.pos.y + obj.height > y1) {
					if (obj.collision) this.speed.right = 0;
					return true;
				}
				break;
			}
			case "DOWN": {
				if (obj.pos.y + obj.height + iceStart >= y2 &&
				obj.pos.y + iceStart <= y2 && obj.pos.x < x2 &&
				obj.pos.x + obj.width > x1) {
					if (obj.collision) this.speed.down = 0;
					return true;
				}
				break;
			}
		}
		this.speed.up = this.speed.permanent;
		this.speed.left = this.speed.permanent;
		this.speed.right = this.speed.permanent;
		this.speed.down = this.speed.permanent;
		return false;
	}
	return false;
}

GameObjs.prototype.setUnderlayCollisionWith = function (obj, newPos) {
	var x1, x2, y1, y2;
	if (obj && this) {
		x1 = newPos ? this.newPos.x : this.pos.x;
		x2 = (newPos ? this.newPos.x : this.pos.x) + this.width;
		y1 = newPos ? this.newPos.y : this.pos.y;
		y2 = (newPos ? this.newPos.y : this.pos.y) + this.height;
		switch (this.parent.dir) {
			case "UP": {
				if (obj.pos.y + obj.height > y1 &&
				obj.pos.y < y1 && obj.pos.x < x2 &&
				obj.pos.x + obj.width > x1) {
					if(obj.collision) this.canGoUp = false;
					return true;
				}
				break;
			}
			case "LEFT": {
				if (obj.pos.x + obj.width > x1 &&
				obj.pos.x < x1 && obj.pos.y < y2 &&
				obj.pos.y + obj.height > y1) {
					if(obj.collision) this.canGoLeft = false;
					return true;
				}
				break;
			}
			case "RIGHT": {
				if (obj.pos.x + obj.width > x2 &&
				obj.pos.x < x2 && obj.pos.y < y2 &&
				obj.pos.y + obj.height > y1) {
					if(obj.collision) this.canGoRight = false;
					return true;
				}
				break;
			}
			case "DOWN": {
				if (obj.pos.y + obj.height > y2 &&
				obj.pos.y < y2 && obj.pos.x < x2 &&
				obj.pos.x + obj.width > x1) {
					if(obj.collision) this.canGoDown = false;
					return true;
				}
				break;
			}
		}
		this.canGoUp = true;
		this.canGoLeft = true;
		this.canGoRight = true;
		this.canGoDown = true;
		return false;
	}
	return false;
}

GameObjs.prototype.animate = function () {
	if (!this.animProp) return 0;
	var i = 1,
		obj = this,
		order;

	setInterval(function tick () {
		order = obj.animProp.order;
		if (order[i] || order[i] == 0) {
			obj.frameIndex = order[i]*obj.size + obj.animProp.startPos;
			i++;
		} else if(obj.animProp.loop) {
			i = 0;
			obj.frameIndex = order[i]*obj.size + obj.animProp.startPos;
			i++
		} else obj.frameIndex = obj.animProp.startPos;
	}, 1000/obj.animProp.speed);
};

GameObjs.prototype.getDir = function () {
	var dir;
	switch (this.dir) {
		case "UP": { dir = 0; break; }
		case "LEFT": { dir = this.size; break; }
		case "RIGHT": { dir = this.size*2; break; }
		case "DOWN": { dir = this.size*3; break; }
	}
	return dir;
}

GameObjs.prototype.draw = function () {
	var dir = 0;
	var sprite = this.sprite;

	if (this.dir && !(this instanceof BulletExp)) dir = this.getDir();

	context.drawImage (
		sprite,
		this.frameIndex,
		dir,
		this.size,
		this.size,
		this.pos.x,
		this.pos.y,
		this.size,
		this.size
	);
}
function Enemy (type, pos, hasBonus, lifes) {
	GameObjs.apply(this, arguments);
	this.pos = {x: pos.x, y: pos.y};
	this.width = 44;
	this.height = 44;
	this.size = 44;
	this.dir = "DOWN";
	this.power = 1;
	this.canShot = true;
	this.shotDelay = {time: 200, check: true};
	this.randomShot = 6;
	this.cond = true;
	this.instrIndex = 0;
	this.instructions = [];
	this.aim = "free";
	this.animProp = {
		speed: 45, //fps
		order: [0, 1], //order of frames
		loop: true, //infinity animation
		startPos: 0
	};
	switch (type) {
		case "simple": {
			switch(hasBonus) {
				case true: {
					this.sprite = resources.getFile("img", "img/enemy-simple-bonus-sprite.png");
					this.extraSprite = resources.getFile("img", "img/enemy-simple-sprite.png");
					this.hasBonus = true;
					break;
				}
				case false: {
					this.sprite = resources.getFile("img", "img/enemy-simple-sprite.png");
					this.extraSprite = resources.getFile("img", "img/enemy-simple-bonus-sprite.png");
					break;
				}
			}
			this.speed = {
				permanent: simpleEnemySpeed,
				up: simpleEnemySpeed,
				left: simpleEnemySpeed,
				right: simpleEnemySpeed,
				down: simpleEnemySpeed
			};
			this.bullets = 3;
			this.bulletSpeed = 4.5; //px per frame ~60fps
			this.lifes = 1;
			this.id = "e1";
			this.destructWieght = 4.5;
			this.points = 100;
			break;
		}
		case "btr": {
			switch(hasBonus) {
				case true: {
					this.sprite = resources.getFile("img", "img/enemy-btr-bonus-sprite.png");
					this.extraSprite = resources.getFile("img", "img/enemy-btr-sprite.png");
					this.hasBonus = true;
					break;
				}
				case false: {
					this.sprite = resources.getFile("img", "img/enemy-btr-sprite.png");
					this.extraSprite = resources.getFile("img", "img/enemy-btr-bonus-sprite.png");
					break;
				}
			}
			this.speed = {
				permanent: btrEnemySpeed,
				up: btrEnemySpeed,
				left: btrEnemySpeed,
				right: btrEnemySpeed,
				down: btrEnemySpeed
			};
			this.bullets = 3;
			this.bulletSpeed = 5;
			this.lifes = 1;
			this.id = "e2";
			this.destructWieght = 7;
			this.points = 200;
			break;
		}
		case "heavy-btr": {
			switch(hasBonus) {
				case true: {
					this.sprite = resources.getFile("img", "img/enemy-btr-bonus-sprite.png");
					this.extraSprite = resources.getFile("img", "img/enemy-btr-sprite.png");
					this.hasBonus = true;
					break;
				}
				case false: {
					this.sprite = resources.getFile("img", "img/enemy-btr-sprite.png");
					this.extraSprite = resources.getFile("img", "img/enemy-btr-bonus-sprite.png");
					this.animProp.startPos = 88*3;
					break;
				}
			}
			this.speed = {
				permanent: btrEnemySpeed,
				up: btrEnemySpeed,
				left: btrEnemySpeed,
				right: btrEnemySpeed,
				down: btrEnemySpeed
			};
			this.bullets = 3;
			this.bulletSpeed = 5;
			this.lifes = 4;
			this.id = "e2";
			this.destructWieght = 7;
			this.points = 600;
			break;
		}
		case "bursting": {
			switch(hasBonus) {
				case true: {
					this.sprite = resources.getFile("img", "img/enemy-bursting-bonus-sprite.png");
					this.extraSprite = resources.getFile("img", "img/enemy-bursting-sprite.png");
					this.hasBonus = true;
					break;
				}
				case false: {
					this.sprite = resources.getFile("img", "img/enemy-bursting-sprite.png");
					this.extraSprite = resources.getFile("img", "img/enemy-bursting-bonus-sprite.png");
					break;
				}
			}
			this.speed = {
				permanent: heavyEnemySpeed,
				up: heavyEnemySpeed,
				left: heavyEnemySpeed,
				right: heavyEnemySpeed,
				down: heavyEnemySpeed
			};
			this.bullets = 2;
			this.bulletSpeed = 9;
			this.lifes = 1;
			this.destructWieght = 3.5;
			this.shotDelay.time = 115;
			this.points = 300;
			break;
		}
		case "bursting-heavy": {
			switch(hasBonus) {
				case true: {
					this.sprite = resources.getFile("img", "img/enemy-bursting-bonus-sprite.png");
					this.extraSprite = resources.getFile("img", "img/enemy-bursting-sprite.png");
					this.hasBonus = true;
					break;
				}
				case false: {
					this.sprite = resources.getFile("img", "img/enemy-bursting-sprite.png");
					this.extraSprite = resources.getFile("img", "img/enemy-bursting-bonus-sprite.png");
					this.animProp.startPos = 88*3;
					break;
				}
			}
			this.speed = {
				permanent: heavyEnemySpeed,
				up: heavyEnemySpeed,
				left: heavyEnemySpeed,
				right: heavyEnemySpeed,
				down: heavyEnemySpeed
			};
			this.bullets = 2;
			this.bulletSpeed = 9;
			this.lifes = 4;
			this.destructWieght = 3.5;
			this.shotDelay.time = 115;
			this.points = 700;
			break;
		}
		case "heavy": {
			switch(hasBonus) {
				case true: {
					this.sprite = resources.getFile("img", "img/enemy-heavy-bonus-sprite.png");
					this.extraSprite = resources.getFile("img", "img/enemy-heavy-sprite.png");
					this.hasBonus = true;
					break;
				}
				case false: {
					this.sprite = resources.getFile("img", "img/enemy-heavy-sprite.png");
					this.extraSprite = resources.getFile("img", "img/enemy-heavy-bonus-sprite.png");
					this.animProp.startPos = 88*3;
					break;
				}
			}
			this.speed = {
				permanent: heavyEnemySpeed,
				up: heavyEnemySpeed,
				left: heavyEnemySpeed,
				right: heavyEnemySpeed,
				down: heavyEnemySpeed
			};
			this.bullets = 3;
			this.bulletSpeed = 4.5;
			this.lifes = 4;
			this.destructWieght = 3;
			this.points = 400;
			break;
		}
	}
}

function createEnemy (type, pos) {
	var hasBonus = false;
	if ((stage.squad.length - 1)%5 == 0) hasBonus = true;
	stage.squad.splice(0, 1);
	var enemy = new Enemy(type, pos, hasBonus);
	enemy.timeOfExisting = 0;
	if (hasBonus) {
		enemy.animProp.order = [0, 1, 0, 1, 0, 1, 2, 3, 2, 3, 2, 3];
	}
	createUnderlay(enemy);
	enemy.animate();
	enemy.setRandomShot();
	enemy.updateInstructions();
	objs.Enemy.push(enemy);
}

Enemy.prototype = Object.create(GameObjs.prototype); 
Enemy.prototype.constructor = Enemy;

Enemy.prototype.findPath = function (obj) {
	var openList = [], closeList = [],
	canGoUp, 
	canGoLeft, 
	canGoRight, 
	canGoDown, 
	pointA, pointB, minF, eX, eY;
	
	var enemy = this;
	var destructWieght = this.destructWieght;

	if (!obj) {
		enemy.aim = "free";
		enemy.freeMoving();
		return 0;
	}

	enemy.area = cloneMap();
	
	pointA = {
		x: Math.round(this.pos.x/22),
		y: Math.round(this.pos.y/22),
		F: 0,
		G: 0
	};
	this.pointA = pointA;
	pointB = {
		x: Math.round(obj.pos.x/22),
		y: Math.round(obj.pos.y/22),
	};
	openList = [pointA];
	enemy.area[pointB.y][pointB.x] = "B";

	for (var j = 0; j < objs.Enemy.length; j++) {
		if (objs.Enemy[j] != enemy) {
			eX = Math.round(objs.Enemy[j].pos.x/22);
			eY = Math.round(objs.Enemy[j].pos.y/22);
			enemy.area[eY][eX] = "x";
			enemy.area[eY][eX + 1] = "x";
			enemy.area[eY + 1][eX] = "x";
			enemy.area[eY + 1][eX + 1] = "x";
		}
	}

	while (openList.length) {
		// ищем вершину с минимальным весом
		minF = openList[0].F;
		var inceptPoint = {};
		for (var i = 0; i < openList.length; i++) {
			if (openList[i].F < minF || openList.length == 1) inceptPoint = openList[i];
			else inceptPoint = openList[0];
		}

		// проверяем граничащие клетки на доступность
		// клетка сверху
		if (inceptPoint.y - 1 >= 0) { 

			canGoUp = enemy.area[inceptPoint.y - 1][inceptPoint.x] != "x" 
			&& enemy.area[inceptPoint.y - 1][inceptPoint.x + 1] != "x";

			isBrick = enemy.area[inceptPoint.y - 1][inceptPoint.x] == 1 
			|| enemy.area[inceptPoint.y - 1][inceptPoint.x + 1] == 1;

			if (canGoUp) {
				var newPoint = {};
				newPoint.x = inceptPoint.x;
				newPoint.y = inceptPoint.y - 1;

				if (isBrick) {
					newPoint.weight = destructWieght;
					newPoint.rule = "up-fire";
				} else {
					newPoint.weight = 1;
					newPoint.rule = "UP";
				}
				newPoint.F = getF(newPoint, inceptPoint);

				if (enemy.area[newPoint.y][newPoint.x] == "B" || 
					enemy.area[newPoint.y][newPoint.x + 1] == "B") {
					newPoint.parent = inceptPoint;
					closeList.push(inceptPoint);
					closeList.push(newPoint);
					getInstructions(newPoint);
					break;
				}

				changeOrAdd(newPoint, inceptPoint);
			}
		}

		// клетка слева
		if (inceptPoint.x - 1 >= 0) { 

			canGoLeft = enemy.area[inceptPoint.y][inceptPoint.x - 1] != "x" 
			&& enemy.area[inceptPoint.y + 1][inceptPoint.x - 1] != "x";

			isBrick = enemy.area[inceptPoint.y][inceptPoint.x - 1] == 1 
			|| enemy.area[inceptPoint.y + 1][inceptPoint.x - 1] == 1;

			if (canGoLeft) {
				var newPoint = {};
				newPoint.x = inceptPoint.x - 1;
				newPoint.y = inceptPoint.y;

				if (isBrick) {
					newPoint.weight = destructWieght;
					newPoint.rule = "left-fire";
				} else {
					newPoint.weight = 1;
					newPoint.rule = "LEFT";
				}
				newPoint.F = getF(newPoint, inceptPoint);

				if (enemy.area[newPoint.y][newPoint.x] == "B" || 
					enemy.area[newPoint.y + 1][newPoint.x] == "B") {
					newPoint.parent = inceptPoint;
					closeList.push(inceptPoint);
					closeList.push(newPoint);
					getInstructions(newPoint);
					break;
				}

				changeOrAdd(newPoint, inceptPoint);
			}
		}

		// клетка справа
		if (inceptPoint.x + 2 < 26) { 

			canGoRight = enemy.area[inceptPoint.y][inceptPoint.x + 2] != "x" 
			&& enemy.area[inceptPoint.y + 1][inceptPoint.x + 2] != "x";
			
			isBrick = enemy.area[inceptPoint.y][inceptPoint.x + 2] == 1 
			|| enemy.area[inceptPoint.y + 1][inceptPoint.x + 2] == 1;

			if (canGoRight) {
				var newPoint = {};
				newPoint.x = inceptPoint.x + 1;
				newPoint.y = inceptPoint.y;

				if (isBrick) {
					newPoint.weight = destructWieght;
					newPoint.rule = "right-fire";
				} else {
					newPoint.weight = 1;
					newPoint.rule = "RIGHT";
				}
				newPoint.F = getF(newPoint, inceptPoint);

				if (enemy.area[newPoint.y][newPoint.x] == "B" || 
					enemy.area[newPoint.y + 1][newPoint.x] == "B") {
					newPoint.parent = inceptPoint;
					closeList.push(inceptPoint);
					closeList.push(newPoint);
					getInstructions(newPoint);
					break;
				}

				changeOrAdd(newPoint, inceptPoint);
			}
		}

		// клетка снизу
		if (inceptPoint.y + 2 < 26) { 

			canGoDown = enemy.area[inceptPoint.y + 2][inceptPoint.x] != "x" 
			&& enemy.area[inceptPoint.y + 2][inceptPoint.x + 1] != "x";

			isBrick = enemy.area[inceptPoint.y + 2][inceptPoint.x] == 1 
			|| enemy.area[inceptPoint.y + 2][inceptPoint.x + 1] == 1;

			if (canGoDown) {
				var newPoint = {};
				newPoint.x = inceptPoint.x;
				newPoint.y = inceptPoint.y + 1;

				if (isBrick) {
					newPoint.weight = destructWieght;
					newPoint.rule = "down-fire";
				} else {
					newPoint.weight = 1;
					newPoint.rule = "DOWN";
				}
				newPoint.F = getF(newPoint, inceptPoint);

				if (enemy.area[newPoint.y][newPoint.x] == "B" || 
					enemy.area[newPoint.y][newPoint.x + 1] == "B") {
					newPoint.parent = inceptPoint;
					closeList.push(inceptPoint);
					closeList.push(newPoint);
					getInstructions(newPoint);
					break;
				}

				changeOrAdd(newPoint, inceptPoint);
			}
		}
		enemy.area[inceptPoint.y][inceptPoint.x] = "x";
		closeList.push(inceptPoint);
		openList = spliceObj(inceptPoint, openList);
	}
	this.instructions.reverse();

	// вспомогательные функции
	function getInstructions (lastPoint) {
		var rule = {
			value: lastPoint.rule,
			posX: lastPoint.x*22,
			posY: lastPoint.y*22
		};
		enemy.instructions.push(rule);
		if (lastPoint.parent) {
			if (lastPoint.parent.x == pointA.x && lastPoint.parent.y == pointA.y);
				else getInstructions (lastPoint.parent);
		} else return 0;
	}

	// сравниваем вес новой точки с весом соотв. точки в открытом списке
	function changeOrAdd (newPoint, inceptPoint) {
		if (enemy.area[newPoint.y][newPoint.x] == "o") {
			var oldPoint = getElByPos(newPoint.x, newPoint.y, openList);
			if (newPoint.G < oldPoint.G) {
				newPoint.parent = inceptPoint;
				openList = changeArr(newPoint, openList);
			}
		} else {
			newPoint.parent = inceptPoint;
			openList.push(newPoint);
			enemy.area[newPoint.y][newPoint.x] = "o";
		}
	}

	function getElByPos (x, y, arr) {
		for (var i = 0; i < arr.length; i++) {
			if (arr[i].x == x && arr[i].y == y) return arr[i];
		}
		return 0;
	}

	// заменяем элемент в открытом списке на элемент с меньшим весом
	function changeArr(obj, arr) {
		for (var i = 0; i < arr.length; i++) {
			if (arr[i].x == obj.x && arr[i].y == obj.y) {
				arr[i] = obj;
				return arr;
			}
		}
		return arr;
	}

	function spliceObj (obj, arr) {
		for (var i = 0; i < arr.length; i++) {
			if (arr[i].x == obj.x && arr[i].y == obj.y) {
				arr.splice(i, 1);
				return arr;
			}
		}
		return arr;
	}

	// высчитываем вес вершины
	function getF (newPoint, inceptPoint) {
		newPoint.G = inceptPoint.G + newPoint.weight;
		newPoint.H = Math.abs(pointB.y - newPoint.y) + Math.abs(pointB.x - newPoint.x);
		return newPoint.G + newPoint.H;
	}
}

Enemy.prototype.freeMoving = function () {
	var dirArr = ["UP", "LEFT", "RIGHT", "DOWN"];
	var i, beh, randIndex = Math.floor(Math.random()*(dirArr.length));
	var enemy = this;
	var oeX, oeY, eX = Math.round(this.pos.x/22), eY = Math.round(this.pos.y/22);
	for (i = 0; i < 50; i++) {

		enemy.area = cloneMap();
		for (var j = 0; j < objs.Enemy.length; j++) {
			if (objs.Enemy[j] != enemy) {
				oeX = Math.round(objs.Enemy[j].pos.x/22);
				oeY = Math.round(objs.Enemy[j].pos.y/22);
				enemy.area[oeY][oeX] = "x";
				enemy.area[oeY][oeX + 1] = "x";
				enemy.area[oeY + 1][oeX] = "x";
				enemy.area[oeY + 1][oeX + 1] = "x";
			}
		}

		switch(dirArr[randIndex]) {
			case "UP": {
				if (eY - 1 >= 0) {
					canGoUp = enemy.area[eY - 1][eX] != "x" && enemy.area[eY - 1][eX + 1] != "x";
					isBrick = enemy.area[eY - 1][eX] == 1 || enemy.area[eY - 1][eX + 1] == 1;
					if (canGoUp) {
						eY--;
						if (isBrick) {
							beh = Math.random()*10;
							if (beh > 4) {
								changeDir("UP");
								continue;
							} else instr = { value: "up-fire", posX: eX*22, posY: eY*22 };

						} else instr = { value: "UP", posX: eX*22, posY: eY*22 };

						this.instructions.push(instr);

					} else changeDir("UP");
				} else changeDir("UP");
				break;
			}
			case "LEFT": {
				if (eX - 1 >= 0) {
					canGoLeft = enemy.area[eY][eX - 1] != "x" && enemy.area[eY + 1][eX - 1] != "x";
					isBrick = enemy.area[eY][eX - 1] == 1 || enemy.area[eY + 1][eX - 1] == 1;
					if (canGoLeft) {
						eX--;
						if (isBrick) {
							beh = Math.floor(Math.random()*2);
							beh = Math.random()*10;
							if (beh > 4) {
								changeDir("LEFT");
								continue;
							} else instr = { value: "left-fire", posX: eX*22, posY: eY*22 };

						} else instr = { value: "LEFT", posX: eX*22, posY: eY*22 };

						this.instructions.push(instr);

					} else changeDir("LEFT");
				} else changeDir("LEFT");
				break;
			}
			case "RIGHT": {
				if (eX + 2 < enemy.area.length) {
					canGoRight = enemy.area[eY][eX + 2] != "x" && enemy.area[eY + 1][eX + 2] != "x";
					isBrick = enemy.area[eY][eX + 2] == 1 || enemy.area[eY + 1][eX + 2] == 1;
					if (canGoRight) {
						eX++;
						if (isBrick) {
							beh = Math.floor(Math.random()*2);
							beh = Math.random()*10;
							if (beh > 4) {
								changeDir("RIGHT");
								continue;
							} else instr = { value: "right-fire", posX: eX*22, posY: eY*22 };

						} else instr = { value: "RIGHT", posX: eX*22, posY: eY*22 };

						this.instructions.push(instr);

					} else changeDir("RIGHT");
				} else changeDir("RIGHT");
				break;
			}
			case "DOWN": {
				if (eY + 2 < enemy.area.length) {
					canGoDown = enemy.area[eY + 2][eX] != "x" && enemy.area[eY + 2][eX + 1] != "x";
					isBrick = enemy.area[eY + 2][eX] == 1 || enemy.area[eY + 2][eX + 1] == 1;
					if (canGoDown) {
						eY++;
						if (isBrick) {
							beh = Math.floor(Math.random()*2);
							beh = Math.random()*10;
							if (beh > 4) {
								changeDir("DOWN");
								continue;
							} else instr = { value: "down-fire", posX: eX*22, posY: eY*22 };
						} else instr = { value: "DOWN", posX: eX*22, posY: eY*22 };

						this.instructions.push(instr);

					} else changeDir("DOWN");
				} else changeDir("DOWN");
				break;
			}
		}
	}

	function changeDir(dir) {
		var i;
		if (dirArr.length < 2) dirArr = ["UP", "LEFT", "RIGHT", "DOWN"];
		for (i = 0; i < dirArr.length; i++) {

			if (dirArr[i] == dir) {
				dirArr.splice(i, 1);
				randIndex = Math.floor(Math.random()*(dirArr.length));
			}
		}
	}
}

Enemy.prototype.setRandomShot = function () {
	var enemy = this;
	var randShot = setInterval(function () {
		if (enemy.randomShot > 6) {
			enemy.canShot = true;
		}
		enemy.randomShot = Math.random()*10;
	}, 200);
}

Enemy.prototype.updateInstructions = function () {
	var enemy = this;
	enemy.timeToAttack = Math.floor(Math.random() * (10000 + 1)) + 10000 - numOfStage*300;
	enemy.timeToChangeAim = Math.floor(Math.random() * (12000 + 1)) + enemy.timeToAttack + 8000;
	enemy.timeToCoolDown = Math.floor(Math.random() * (15000 + 1)) + enemy.timeToChangeAim + 10000;
	enemy.whatToAttack =  (Math.floor(Math.random() * 10) < 7) ? "player" : "base";

	// Math.floor(Math.random() * (6000 + 1)) + 12000;

	updInstr();

	function updInstr() {
		enemy.instrIndex = 0;
		enemy.instructions = [];
		if (enemy.timeOfExisting >= enemy.timeToAttack && enemy.timeOfExisting < enemy.timeToChangeAim) {
			enemy.aim = enemy.whatToAttack;
			if (enemy.aim == "player") {

				if (!objs.Player[0]) enemy.aim = "free";

			} else if (objs.Base[0].state == "broken") {

				if (objs.Player[0]) enemy.aim = "player";
				else enemy.aim = "free";
			}

		} else if (enemy.timeOfExisting >= enemy.timeToChangeAim && enemy.timeOfExisting < enemy.timeToCoolDown) {
			enemy.aim = (enemy.whatToAttack == "player") ? "base" : "player";

			if (enemy.aim == "player") {

				if (!objs.Player[0]) enemy.aim = "free";

			} else if (objs.Base[0].state == "broken") {

				if (objs.Player[0]) enemy.aim = "player";
				else enemy.aim = "free";
			}

		} else if (enemy.timeOfExisting >= enemy.timeToCoolDown) {

			enemy.aim = "free";
			enemy.timeOfExisting = 0;
			enemy.whatToAttack =  (Math.floor(Math.random() * 10) > 7) ? "player" : "base";
		}

		switch(enemy.aim) {
			case "free": {
				enemy.freeMoving();
				break;
			}
			case "player": {
				enemy.findPath(objs.Player[0]);
				break;
			}
			case "base": {
				enemy.findPath(objs.Base[0]);
				break;
			}
		}
		switch (enemy.type) {
			case "heavy": {
				enemy.timeCH = Math.floor(Math.random() * (2500 + 1)) + 1500;
				if(enemy.aim == "player") enemy.timeCH = enemy.timeCH - 500;
				break;
			}

			case "btr": {
				enemy.timeCH = Math.floor(Math.random() * (1000 + 1)) + 500;
				if(enemy.aim == "player") enemy.timeCH = enemy.timeCH - 300;
				break;
			}
			default: enemy.timeCH = Math.floor(Math.random() * (2000 + 1)) + 1000;
		}

		setTimeout(updInstr, enemy.timeCH);
	}
}

function botContol (enemy) {
	enemy.timeOfExisting += 17;
	if(!enemy) return 0;
	if(enemy.instrIndex < enemy.instructions.length) {
		if (canEnemyShot) createBullet(enemy);
		if(enemy.cond) {
			if (canEnemyMove) {
				switch(enemy.instructions[enemy.instrIndex].value) {
					case "UP": {
						control(enemy, "UP");
						if (enemy.pos.y <= enemy.instructions[enemy.instrIndex].posY) enemy.cond = false;
						break;
					}
					case "LEFT": {
						control(enemy, "LEFT"); 
						enemy.dir = "LEFT";
						if (enemy.pos.x <= enemy.instructions[enemy.instrIndex].posX) enemy.cond = false;
						break;
					}
					case "RIGHT": {
						control(enemy, "RIGHT");
						if (enemy.pos.x >= enemy.instructions[enemy.instrIndex].posX) enemy.cond = false;
						break;
					}
					case "DOWN": {
						control(enemy, "DOWN");
						if (enemy.pos.y >= enemy.instructions[enemy.instrIndex].posY) enemy.cond = false;
						break;
					}
					case "up-fire": {
						control(enemy, "UP"); 
						createBullet(enemy);
						enemy.canShot = true;
						if (enemy.pos.y <= enemy.instructions[enemy.instrIndex].posY) enemy.cond = false;
						break;
					}
					case "left-fire": {
						control(enemy, "LEFT"); 
						createBullet(enemy);
						enemy.canShot = true;
						if (enemy.pos.x <= enemy.instructions[enemy.instrIndex].posX) enemy.cond = false;
						break;
					}
					case "right-fire": {
						control(enemy, "RIGHT");
						createBullet(enemy);
						enemy.canShot = true;
						if (enemy.pos.x >= enemy.instructions[enemy.instrIndex].posX) enemy.cond = false;
						break;
					}
					case "down-fire": {
						control(enemy, "DOWN"); 
						createBullet(enemy);
						enemy.canShot = true;
						if (enemy.pos.y >= enemy.instructions[enemy.instrIndex].posY) enemy.cond = false;
						break;
					}
				}
			} 
		} else {
			enemy.cond = true;
			enemy.instrIndex++;
		} 
	}
}

function cloneMap () {
	var i, j, area = getMap(numOfStage);
	for (i = 0; i < area.length; i++) {
		for (j = 0; j < 26; j++) {
			switch(stage.map[i][j]) {
				case 1: area[i][j] = 1; break;
				case 2: area[i][j] = "x"; break;
				case 4: area[i][j] = "x"; break;
				default: area[i][j] = 0; break;
			}
		}
	}
	return area;
}
function Curtains (y1, y2) {
	this.y1 = y1;
	this.y2 = y2;
	this.speed = 5.5;
	this.dir = "toClose";
	this.active = false;
}

var curtains = new Curtains(600, -600);

Curtains.prototype.move = function (dir) {
	switch (dir) {
		case "toClose": {
			if (this.y1 > canvas.height/2) {
				this.y1 -= this.speed;
				this.y2 += this.speed;
			} else {
				this.state = "finished";
			}
			break;
		}
		case "toOpen": {
			if (this.y1 < 600) {
				this.y1 += this.speed;
				this.y2 -= this.speed;
			} else {
				this.active = false;
				this.state = "opened";
			}
			break;
		}
	} 
}

function curtainsMove () {
	curtains.active = true;
}
function Underlay (parent) {
	GameObjs.apply(this, arguments);
	this.sprite = resources.getFile("img", "img/underlay.png");
	this.pos = {
		x: Math.round(parent.pos.x/22)*22, 
		y: Math.round(parent.pos.y/22)*22
	};
	this.newPos = this.pos;
	this.width = 44;
	this.height = 44;
	this.size = 44;
	this.parent = parent;
	this.canGoUp = true;
	this.canGoLeft = true;
	this.canGoRight = true;
	this.canGoDown = true;
}

Underlay.prototype = Object.create(GameObjs.prototype); 
Underlay.prototype.constructor = Underlay;

function createUnderlay (parent) {
	var underlay = new Underlay (parent);
	parent.underlay = underlay;
	objs.Underlay.push(underlay);
}

function deleteUnderlay(parent) {
	for (var j = 0; j < objs.Underlay.length; j++) {
		if (parent == objs.Underlay[j].parent)
			objs.Underlay.splice(j, 1);
	}
}
function Player (pos, rank) {
	GameObjs.apply(this, arguments);
	this.sprite = window.resources.getFile("img", "img/player-sprite.png");
	this.pos = {x: pos.x, y: pos.y};
	this.width = 44;
	this.height = 44;
	this.size = 44;
	this.dir = "UP";
	this.canShot = true;
	this.lifes = playerLifes;
	this.shotDelay = {time: 130, check: true};

	this.speed = {
		permanent: playerSpeed,
		up: playerSpeed,
		left: playerSpeed,
		right: playerSpeed,
		down: playerSpeed
	}; 

	this.animProp = {
		speed: 27, //fps
		order: [0, 1], //order of frames
		loop: true, //infinity animation
		startPos: 0
	}

	switch (rank) {
		case 1: {
			this.power = 1;
			this.strength = 1;
			this.bulletSpeed = 4.5;
			this.animProp.startPos = 0;
			this.bullets = 1;
			break;
		}
		case 2: {
			this.power = 1;
			this.strength = 1;
			this.bulletSpeed = 9;
			this.shotDelay.time = 105;
			this.animProp.startPos = 88;
			this.bullets = 1;
			break;
		}
		case 3: {
			this.power = 1;
			this.strength = 2;
			this.bulletSpeed = 9;
			this.shotDelay.time = 105;
			this.animProp.startPos = 176;
			this.bullets = 2;
			break;
		}
		case 4: {
			this.power = 2;
			this.strength = 3;
			this.bulletSpeed = 9;
			this.shotDelay.time = 105;
			this.animProp.startPos = 264;
			this.bullets = 2;
			break;
		}
		case 5: {
			this.power = 2;
			this.strength = 4;
			this.bulletSpeed = 10;
			this.shotDelay.time = 95;
			this.animProp.startPos = 352;
			this.bullets = 3;
			break;
		}
	}
}

function createPlayer (pos, rank, armory) {
	var player = new Player(pos, rank);
	player.animate();
	if (armory) player.setArmory(4000);
	createUnderlay(player);
	objs.Player.push(player);
}

Player.prototype = Object.create(GameObjs.prototype); 
Player.prototype.constructor = Player;

Player.prototype.setArmory = function (ms) {
	clearTimeout(guardTimeOut);
	var player = this;
	player.guard = true;
	player.sprite = resources.getFile("img", "img/player-defence-sprite.png");
	guardTimeOut = setTimeout(function () {
		player.guard = false;
		player.sprite = resources.getFile("img", "img/player-sprite.png");
	}, ms);
}
function Respawn () {
	GameObjs.apply(this, arguments);
	this.sprite = resources.getFile("img", "img/respawn.png");
	this.size = 44;
	this.width = 44;
	this.height = 44;
	this.animProp = {
		speed: 8, //fps
		order: [0, 1, 2, 1], //order of frames
		loop: true, //infinity animation
		startPos: 0
	}
}

Respawn.prototype = Object.create(GameObjs.prototype); 
Respawn.prototype.constructor = Respawn;

function PlayerRespawn () {
	Respawn.apply(this, arguments);
}

function createPlayerRespawn () {
	var respawn = new PlayerRespawn();
	respawn.pos = {};
	respawn.pos.x = 8*22;
	respawn.pos.y = 24*22;
	respawn.animate();
	objs.PlayerRespawn.push(respawn);
	var i;
	setTimeout(function () {
		for (var i = 0; i < objs.PlayerRespawn.length; i++) {
			if (objs.PlayerRespawn[i] == respawn) objs.PlayerRespawn.splice(i, 1);
		}
		createPlayer({x: respawn.pos.x, y: respawn.pos.y}, playerRank, true);
	}, 1300);
}

PlayerRespawn.prototype = Object.create(Respawn.prototype); 
PlayerRespawn.prototype.constructor = PlayerRespawn;

function EnemyRespawn (order) {
	Respawn.apply(this, arguments);
	this.order = order;
}

function createEnemyRespawn (order, isFirstly) {
	if (!stage.squad.length) return 0;
	var respawn = new EnemyRespawn(order);
	var i, type;
	respawn.pos = {};
	switch (order) {
		case 0: {
			respawn.pos.x = 12*22;
			respawn.pos.y = 0;
			break;
		}
		case 1: {
			respawn.pos.x = 0;
			respawn.pos.y = 0;
			break;
		}
		case 2: {
			respawn.pos.x = 24*22;
			respawn.pos.y = 0;
			break;
		}
		default: {
			respawn.pos.x = 0;
			respawn.pos.y = 0;
		}

	}
	if (objs.Respawn.length || isFirstly) {
		setTimeout(function() {
			createEnemyRespawn (respawn.order, false);
		}, 1900);
		return 0;
	}

	respawn.animate();
	objs.Respawn.push(respawn);

	setTimeout(function () {
		for (i = 0; i < objs.Respawn.length; i++) {
			if (objs.Respawn[i] == respawn) {
				objs.Respawn.splice(i, 1);
				break;
			}
		}
		createEnemy(stage.squad[0], {x: respawn.pos.x, y: respawn.pos.y});
	}, 1300);
}

EnemyRespawn.prototype = Object.create(Respawn.prototype); 
EnemyRespawn.prototype.constructor = EnemyRespawn;
function Block (type, pos) {
	GameObjs.apply(this, arguments);
	this.pos = {x: pos.x, y: pos.y};
	this.width = 22;
	this.height = 22;
	this.size = 22;
	this.type = type;

	switch (type) {
		case "brick": {
			this.sprite = window.resources.getFile("img", "img/brick.png");
			this.destruction = true;
			this.strength = 1;
			this.integrity = 3;
			break;
		}

		case "steelBrick": {
			this.sprite = window.resources.getFile("img", "img/steel-brick.png");
			this.destruction = true;
			this.strength = 2;
			this.animProp = {
				speed: 2, //fps
				order: [0, 1], //order of frames
				loop: true, //infinity animation
				startPos: 0
			};
			break;
		}

		case "tree": {
			this.sprite = window.resources.getFile("img", "img/tree.png");
			this.collision = false;
			this.destruction = false;
			this.bulletPass = true;
			break;
		}

		case "water": {
			this.sprite = window.resources.getFile("img", "img/water.png");
			this.destruction = false;
			this.bulletPass = true;
			this.animProp = {
				speed: 1.5, //fps
				frames: 2,
				order: [0, 1],
				loop: true,
				startPos: 0
			}
			break;
		}

		case "ice": {
			this.sprite = window.resources.getFile("img", "img/ice.png");
			this.collision = false;
			this.destruction = false;
			this.bulletPass = true;
			break;
		}
	}
}

Block.prototype = Object.create(GameObjs.prototype);
Block.prototype.constructor = Block;

function createBlock (type, pos) {
	var obj = new Block(type, pos);
	if (type == "water") obj.animate();
	switch(obj.type) {
		case "tree": {
			objs.Tree.push(obj);
			break;
		}
		case "ice": {
			objs.Ice.push(obj);
			break;
		}
		default: {
			objs.Block.push (obj);
		}
	}
}

function brickIntegrity (bullet, block) {
	if(block.integrity == 3) {
		switch(bullet.dir) {
			case "UP": {
				block.frameIndex = block.width; 
				block.state = "UP"; 
				break;
			}
			case "DOWN": {
				block.frameIndex = 2*block.width; 
				block.state = "DOWN"; 
				break;
			}
			case "LEFT": {
				block.frameIndex = 3*block.width; 
				block.state = "LEFT"; 
				break;
			}
			case "RIGHT": {
				block.frameIndex = 4*block.width; 
				block.state = "RIGHT"; 
				break;
			}
		}
		block.integrity = 2;
	} else if (block.integrity == 2) {
		switch (bullet.dir) {
			case "UP": {
				switch (block.state) {
					case "UP": {
						block.integrity = 0;
						break;
					}
					case "DOWN": {
						block.integrity = 0;
						break;
					}
					case "LEFT": {
						block.frameIndex = 5*block.width;
						block.integrity = 1;
						break;
					}
					case "RIGHT": {
						block.frameIndex = 6*block.width;
						block.integrity = 1;
						break;
					}
				}
				break;
			}
			case "DOWN": {
				switch (block.state) {
					case "UP": {
						block.integrity = 0;
						break;
					}
					case "DOWN": {
						block.integrity = 0;
						break;
					}
					case "LEFT": {
						block.frameIndex = 7*block.width;
						block.integrity = 1;
						break;
					}
					case "RIGHT": {
						block.frameIndex = 8*block.width;
						block.integrity = 1;
						break;
					}
				}
				break;
			}
			case "LEFT": {
				switch (block.state) {
					case "UP": {
						block.frameIndex = 5*block.width;
						block.integrity = 1;
						break;
					}
					case "DOWN": {
						block.frameIndex = 7*block.width;
						block.integrity = 1;
						break;
					}
					case "LEFT": {
						block.integrity = 0;
						break;
					}
					case "RIGHT": {
						block.integrity = 0;
						break;
					}
				}
				break;
			}
			case "RIGHT": {
				switch (block.state) {
					case "UP": {
						block.frameIndex = 6*block.width;
						block.integrity = 1;
						break;
					}
					case "DOWN": {
						block.frameIndex = 8*block.width;
						block.integrity = 1;
						break;
					}
					case "LEFT": {
						block.integrity = 0;
						break;
					}
					case "RIGHT": {
						block.integrity = 0;
						break;
					}
				}
				break;
			}
		}
	} else if (block.integrity == 1){
		block.integrity = 0;
	}
}
	function Bullet (dir) {
		GameObjs.apply(this, arguments);
		this.sprite = window.resources.getFile("img", "img/bullet.png");
		this.dir = dir;
		this.width = 14;
		this.height = 14;
		this.size = 14;
	}

	Bullet.prototype = Object.create(GameObjs.prototype); 
	Bullet.prototype.constructor = Bullet;

	function createBullet (byObj) {
		var quant = 0;
		for (var i = 0; i < objs.Bullet.length; i++) {
			if(objs.Bullet[i].parent == byObj) quant++;
		}

		if (byObj && quant < byObj.bullets && byObj.shotDelay.check && byObj.canShot) {
			byObj.canShot = false;
			byObj.shotDelay.check = false;

			var dir = byObj.dir;
			var bullet = new Bullet(dir);
			switch (byObj.dir) {
				case "UP": {
					bullet.pos = {
						x: byObj.pos.x + byObj.width/2 - bullet.width/2 ,
						y: byObj.pos.y - 5
					};
					bullet.height = 0;
					break;
				}

				case "DOWN": {
					bullet.pos = {
						x: byObj.pos.x + byObj.width/2 - bullet.width/2 ,
						y: byObj.pos.y + byObj.height
					};
					bullet.height = 0;
					break;
				}

				case "LEFT": {
					bullet.pos = {
						x: byObj.pos.x - 5,
						y: byObj.pos.y + byObj.height/2 - bullet.width/2
					};
					bullet.width = 0;
					break;
				}

				case "RIGHT": {
					bullet.pos = {
						x: byObj.pos.x + byObj.width,
						y: byObj.pos.y + byObj.height/2 - bullet.width/2
					};
					bullet.width = 0;
					break;
				}
			}
			bullet.speed = byObj.bulletSpeed;
			bullet.power = byObj.power;
			bullet.parent = byObj;
			objs.Bullet.push(bullet);
			if (byObj instanceof Player) {
				byObj.canShot = true;
				playSound(sounds.shot, 0.4);
			}

			setTimeout(function () {
				byObj.shotDelay.check = true;
			}, byObj.shotDelay.time);
		}
	}

	function bulletFly (bullet) {
		var i, block, indexArr = [];
		switch(bullet.dir) {
			case "UP": bullet.pos.y -= bullet.speed; break;
			case "LEFT": bullet.pos.x -= bullet.speed; break;
			case "RIGHT": bullet.pos.x += bullet.speed; break;
			case "DOWN": bullet.pos.y += bullet.speed; break;
		}

		// столкновение двух пуль
		if (objs.Bullet.length > 1) {
			var ind = getIndex(bullet);
			for (i = 0; i < objs.Bullet.length; i++) {
				if(bullet != objs.Bullet[i]) {
					if (bullet.isCollideWith(objs.Bullet[i])) {
						if (bullet.parent instanceof Enemy && objs.Bullet[i].parent instanceof Enemy) return 0;
						// if (bullet.parent instanceof Player) bullet.parent.canShot = true;
						// if (objs.Bullet[i].parent instanceof Player) objs.Bullet[i].parent.canShot = true;
						createBulletExp(bullet.pos, bullet.dir);
						if (i > ind) {
							objs.Bullet.splice(i, 1);
							objs.Bullet.splice(ind, 1);
						} else {
							objs.Bullet.splice(ind, 1);
							objs.Bullet.splice(i, 1);
						}
						return true;
					}
				}
			}
		}

		// столкновение пули и блока
		for (i = 0; i < objs.Block.length; i++) {
			block = objs.Block[i];
			if (bullet.isCollideWith(block)) {
				indexArr.push(i);
			}
		}
		var block1 = objs.Block[indexArr[0]], block2 = objs.Block[indexArr[1]];

		if (block1 && block2) {

			if ((block1.type == "steelBrick" || block2.type == "steelBrick") && bullet.parent instanceof Player && bullet.power == 1) {
				playSound(sounds.bulletCol, 0.3);
			}

			if (((block1.type == "brick" && block2.type == "brick") || (bullet.power > 1)) && bullet.parent instanceof Player) {
				playSound(sounds.destroy, 0.3);
			}

			if(!block1.bulletPass && !block2.bulletPass) {

				if (bullet.power == 1) {
					if(block1.type == "brick") brickIntegrity(bullet, block1);
				} else objs.Block[indexArr[0]].integrity = 0;

				if (bullet.power == 1) {
					if (block2.type == "brick") brickIntegrity(bullet, block2);
				} else objs.Block[indexArr[1]].integrity = 0;

				// if (bullet.parent instanceof Player) bullet.parent.canShot = true;
				createBulletExp(bullet.pos, bullet.dir);
				objs.Bullet.splice(getIndex(bullet), 1);

				deleteBlock ();
				return true;

			} else if (!block1.bulletPass && block2.bulletPass) {

				if (bullet.power == 1) {
					if (block1.type == "brick") brickIntegrity(bullet, block1);
				} else objs.Block[indexArr[0]].integrity = 0;

				// if (bullet.parent instanceof Player) bullet.parent.canShot = true;
				createBulletExp(bullet.pos, bullet.dir);
				objs.Bullet.splice(getIndex(bullet), 1);

				deleteBlock ();
				return true;

			} else if (block1.bulletPass && !block2.bulletPass) {

				if (bullet.power == 1) {
					if (block2.type == "brick") brickIntegrity(bullet, block2);
				} else objs.Block[indexArr[1]].integrity = 0;

				// if (bullet.parent instanceof Player) bullet.parent.canShot = true;
				createBulletExp(bullet.pos, bullet.dir);
				objs.Bullet.splice(getIndex(bullet), 1);

				deleteBlock ();
				return true;
			}
		}
		if (block1 && !block2) {
			if(!block1.bulletPass) {

				if ((block1.type == "brick" || bullet.power > 1) && bullet.parent instanceof Player) {
					playSound(sounds.destroy, 0.3);
				}

				if (block1.type == "steelBrick" && bullet.parent instanceof Player && bullet.power == 1) {
					playSound(sounds.bulletCol, 0.3);
				}

				if (bullet.power == 1) {
					if (block1.type == "brick") brickIntegrity(bullet, block1);
				} else objs.Block[indexArr[0]].integrity = 0;

				// if (bullet.parent instanceof Player) bullet.parent.canShot = true;
				createBulletExp(bullet.pos, bullet.dir);
				objs.Bullet.splice(getIndex(bullet), 1);

				deleteBlock ();
				return true;
			}
		}
		if (!block1 && block2) {
			if(!block2.bulletPass) {

				if ((block2.type == "brick" || bullet.power > 1) && bullet.parent instanceof Player) {
					playSound(sounds.destroy, 0.3);
				}

				if (block2.type == "steelBrick" && bullet.parent instanceof Player && bullet.power == 1) {
					playSound(sounds.bulletCol, 0.3);
				}

				if (bullet.power == 1) {
					if (block2.type == "brick") brickIntegrity(bullet, block2);
				} else objs.Block[indexArr[0]].integrity = 0;

				// if (bullet.parent instanceof Player) bullet.parent.canShot = true;
				createBulletExp(bullet.pos, bullet.dir);
				objs.Bullet.splice(getIndex(bullet), 1);

				deleteBlock ();
				return true;
			}
		}

		// столкновение пули и границы холста
		if (setBoundCollision(bullet, canvas)) {
			// if (bullet.parent instanceof Player) bullet.parent.canShot = true;
			createBulletExp(bullet.pos, bullet.dir);
			objs.Bullet.splice(getIndex(bullet), 1);

			if(bullet.parent instanceof Player) playSound(sounds.bulletCol, 0.3);

			return true;
		}

		// столкновение пули и игрока
		if (bullet.isCollideWith(objs.Player[0]) && bullet.parent != objs.Player[0]) {
			bullet.parent.canShot = true;
			if (!objs.Player[0].guard) {
				if (objs.Player[0].strength < 2) {
					createExplosion(objs.Player[0].pos);
					deleteUnderlay(objs.Player[0]);
					objs.Player.splice(0, 1);
					playerRank = 1;

					playSound(sounds.playerFail, 0.4);

					if (playerLifes) {
						createPlayerRespawn();
						playerLifes--;
					} else setTimeout(function () {
						gameStat = "over";
					}, 2000);
				} else {
					playerRank--;
					setRank();

					playSound(sounds.damage);
				}
			}
			createBulletExp(bullet.pos, bullet.dir);
			objs.Bullet.splice(getIndex(bullet), 1);
			return true;
		}

		// столкновение пули и врага
		for (k = 0; k < objs.Enemy.length; k++) {
			enemy = objs.Enemy[k];
			if(bullet.isCollideWith(enemy) && !(bullet.parent instanceof Enemy)) {
				// bullet.parent.canShot = true;
				if (enemy.hasBonus) createBonus(enemy);
					else {
						enemy.lifes -= bullet.power;

						if (enemy.lifes > 0) playSound(sounds.damage);

						enemy.animProp.startPos = enemy.lifes*88 - 88;
					}
				if (enemy.lifes <= 0) {
					bangEnemy(k);
					addPoints(enemy);

					playSound(sounds.bangEnemy);

					k = 0;
				}
				createBulletExp(bullet.pos, bullet.dir);
				objs.Bullet.splice(getIndex(bullet), 1);
				return true;
			}
		}

		// столкновение пули и базы
		if (bullet.isCollideWith(objs.Base[0])) {
			if (objs.Base[0].state == "unbroken") {
				bullet.parent.canShot = true;
				createExplosion(objs.Base[0].pos);
				objs.Base[0].state = "broken";
				objs.Base[0].frameIndex = 44;
				objs.Bullet.splice(getIndex(bullet), 1);
				setTimeout(function () {
						gameStat = "over";
					}, 2000);

				playSound(sounds.playerFail);
				return true;
			}
		}

		function getIndex (bullet) {
			var i;
			for (i = 0; i < objs.Bullet.length; i++) {
				if (bullet == objs.Bullet[i]) return i;
			}
		}

		function deleteBlock () {
			var block;
			for (var i = indexArr.length - 1; i >= 0; i--) {
				block = objs.Block[indexArr[i]];
				if (block.integrity == 0) {
					stage.map[block.pos.y/22][block.pos.x/22] = 0;
					objs.Block.splice(indexArr[i], 1);
				}
			}
		}
	}
function BulletExp (pos, dir) {
	GameObjs.apply(this, arguments);

	this.dir = dir;
	var Ox = pos.x - 22, Oy = pos.y - 22;
	if (dir == "LEFT" || dir == "RIGHT") Oy = pos.y - 14;
	else Ox = pos.x - 14;

	this.sprite = resources.getFile("img", "img/bullet-exp.png");
	this.pos = {x: Ox, y: Oy};
	this.size = 44;
	this.width = 44;
	this.height = 44;
	this.animProp = {
		speed: 15, //fps
		order: [0, 1], //order of frames
		loop: false, //infinity animation
		startPos: 0
	}
}

BulletExp.prototype = Object.create(GameObjs.prototype); 
BulletExp.prototype.constructor = BulletExp;

function createBulletExp (pos, dir) {
	var explosion = new BulletExp(pos, dir);
	explosion.animate();
	objs.Explosion.push(explosion);
	setTimeout(function () {
		for (var i = 0; i < objs.Explosion.length; i++) {
			if (objs.Explosion[i] == explosion) {
				objs.Explosion.splice(i, 1);
				break;
			}
		}
	}, 120);
}

function Explosion (pos) {
	GameObjs.apply(this, arguments);
	this.sprite = resources.getFile("img", "img/explosion.png");
	this.size = 88;
	this.pos = {x: pos.x - 22, y: pos.y - 22};
	this.animProp = {
		speed: 20, //fps
		order: [0, 1, 2, 3, 3, 1, 0], //order of frames
		loop: false, //infinity animation
		startPos: 0
	}
}

Explosion.prototype = Object.create(GameObjs.prototype); 
Explosion.prototype.constructor = Explosion;

function createExplosion (pos) {
	var explosion = new Explosion(pos);
	explosion.animate();
	objs.Explosion.push(explosion);
	setTimeout(function () {
		for (var i = 0; i < objs.Explosion.length; i++) {
			if (objs.Explosion[i] == explosion) {
				objs.Explosion.splice(i, 1);
				break;
			}
		}
	}, (1000/explosion.animProp.speed)*explosion.animProp.order.length);
}
function Base (pos) {
	GameObjs.apply(this, arguments);
	this.sprite = resources.getFile("img", "img/base-new.png");
	this.state =  "unbroken";
	this.pos = {x: pos.x, y: pos.y};
	this.width = 44;
	this.height = 44;
	this.size = 44;
}

Base.prototype = Object.create(GameObjs.prototype); 
Base.prototype.constructor = Base;

function createBase (pos) {
	var base = new Base (pos);
	objs.Base.push(base);
}
function Bonus (pos, type) {
	GameObjs.apply(this, arguments);
	this.collision = false;
	this.size = 44;
	this.width = 44;
	this.height = 44;
	this.pos = {x: pos.x, y: pos.y};
	this.type = type;
	this.points = 400;
	this.animProp = {
		speed: 5, //fps
		order: [0, 1], //order of frames
		loop: true, //infinity animation
		startPos: 0
	}

	switch(type) {
		case 1: {
			this.sprite = resources.getFile("img", "img/bonus-guard.png");
			break;
		}
		case 2: {
			this.sprite = resources.getFile("img", "img/bonus-time.png");
			break;
		}
		case 3: {
			this.sprite = resources.getFile("img", "img/bonus-base.png");
			break;
		}
		case 4: {
			this.sprite = resources.getFile("img", "img/bonus-star.png");
			break;
		}
		case 5: {
			this.sprite = resources.getFile("img", "img/bonus-grenade.png");
			break;
		}
		case 6: {
			this.sprite = resources.getFile("img", "img/bonus-life.png");
			break;
		}

	}
}

Bonus.prototype = Object.create(GameObjs.prototype); 
Bonus.prototype.constructor = Bonus;

function createBonus (fromEnemy) {

	playSound(sounds.bonusAppear);

	var type = Math.floor(Math.random()*6) + 1;
	var pos = {
		x: Math.floor(Math.random()*25)*22,
		y: Math.floor(Math.random()*25)*22

	}
	var bonus = new Bonus(pos, type);
	bonus.animate();
	objs.Bonus.push(bonus);
	setTimeout(function () {
		for (var i = 0; i < objs.Bonus.length; i++) {
			if (bonus == objs.Bonus[i]) objs.Bonus.splice(i, 1);
		}
	}, 10000);

	fromEnemy.hasBonus = false;
	fromEnemy.animProp.order = [];
	fromEnemy.animProp.order = [0, 1];
	fromEnemy.sprite = fromEnemy.extraSprite;
	fromEnemy.animProp.startPos = fromEnemy.lifes*88 - 88;
}

function bonusEffect (bonus) {
	
	switch (bonus.type) {
		case 1: {
			objs.Player[0].setArmory(10000);
			break;
		}
		case 2: {
			for (var i = objs.Enemy.length - 1; i >= 0; i--) {
				freezeEnemy(objs.Enemy[i]);
			}
			break;
		}
		case 3: {
			setBaseDefence();
			break;
		}
		case 4: {
			if(playerRank < 4) playerRank++;
			setRank();
			break;
		}
		case 5: {
			for (var i = objs.Enemy.length - 1; i >= 0; i--) {
				bangEnemy(i);
			}
			break;
		}
		case 6: {
			playerLifes++;
			break;
		}
	}
}

function setRank () {
	var player = objs.Player[0];
	switch(playerRank) {
		case 1: {
			player.power = 1;
			player.strength = 1;
			player.bulletSpeed = 4.5;
			player.animProp.startPos = 0;
			player.bullets = 1;
			break;
		}
		case 2: {
			player.power = 1;
			player.strength = 1;
			player.bulletSpeed = 9;
			player.shotDelay.time = 105;
			player.animProp.startPos = 88;
			player.bullets = 1;
			break;
		}
		case 3: {
			player.power = 1;
			player.strength = 2;
			player.bulletSpeed = 9;
			player.shotDelay.time = 105;
			player.animProp.startPos = 176;
			player.bullets = 2;
			break;
		}
		case 4: {
			player.power = 2;
			player.strength = 3;
			player.bulletSpeed = 9;
			player.shotDelay.time = 105;
			player.animProp.startPos = 264;
			player.bullets = 2;
			break;
		}
		case 5: {
			player.power = 2;
			player.strength = 4;
			player.bulletSpeed = 15;
			player.shotDelay.time = 60;
			player.animProp.startPos = 352;
			player.bullets = 3;
			break;
		}
	}
}

function setBaseDefence () {
	var block, query;

	clearTimeout(baseDefenseTimeOut);
	clearTimeout(baseDefenseTimeOutWarning);

	for (var i = 0; i < objs.Block.length; i++) {
		block = objs.Block[i];
		query = (block.pos.y == 23*22 && block.pos.x == 11*22) || 
				(block.pos.y == 23*22 && block.pos.x == 12*22) ||
				(block.pos.y == 23*22 && block.pos.x == 13*22) ||
				(block.pos.y == 23*22 && block.pos.x == 14*22) ||
				(block.pos.y == 24*22 && block.pos.x == 11*22) ||
				(block.pos.y == 25*22 && block.pos.x == 11*22) ||
				(block.pos.y == 24*22 && block.pos.x == 14*22) ||
				(block.pos.y == 25*22 && block.pos.x == 14*22);
		if (query && block.type == "brick") {
			objs.Block.splice(i, 1);
			i = 0;
		}
	}

	createBlock("steelBrick", {x: 11*22, y: 23*22});
	createBlock("steelBrick", {x: 12*22, y: 23*22});
	createBlock("steelBrick", {x: 13*22, y: 23*22});
	createBlock("steelBrick", {x: 14*22, y: 23*22});
	createBlock("steelBrick", {x: 11*22, y: 24*22});
	createBlock("steelBrick", {x: 11*22, y: 25*22});
	createBlock("steelBrick", {x: 14*22, y: 24*22});
	createBlock("steelBrick", {x: 14*22, y: 25*22});

	baseDefenseTimeOut = setTimeout(function () {
		for (var i = 0; i < objs.Block.length; i++) {
			block = objs.Block[i];
			query = (block.pos.y == 23*22 && block.pos.x == 11*22) || 
					(block.pos.y == 23*22 && block.pos.x == 12*22) ||
					(block.pos.y == 23*22 && block.pos.x == 13*22) ||
					(block.pos.y == 23*22 && block.pos.x == 14*22) ||
					(block.pos.y == 24*22 && block.pos.x == 11*22) ||
					(block.pos.y == 25*22 && block.pos.x == 11*22) ||
					(block.pos.y == 24*22 && block.pos.x == 14*22) ||
					(block.pos.y == 25*22 && block.pos.x == 14*22);
			if (query && block.type == "steelBrick") {
				block.animate();
			}
		}
		baseDefenseTimeOutWarning = setTimeout(function () {
			for (var i = 0; i < objs.Block.length; i++) {
				block = objs.Block[i];
				query = (block.pos.y == 23*22 && block.pos.x == 11*22) || 
						(block.pos.y == 23*22 && block.pos.x == 12*22) ||
						(block.pos.y == 23*22 && block.pos.x == 13*22) ||
						(block.pos.y == 23*22 && block.pos.x == 14*22) ||
						(block.pos.y == 24*22 && block.pos.x == 11*22) ||
						(block.pos.y == 25*22 && block.pos.x == 11*22) ||
						(block.pos.y == 24*22 && block.pos.x == 14*22) ||
						(block.pos.y == 25*22 && block.pos.x == 14*22);
				if (query && block.type == "steelBrick") {
					objs.Block.splice(i, 1);
					i = 0;
				}
			}

			createBlock("brick", {x: 11*22, y: 23*22});
			createBlock("brick", {x: 12*22, y: 23*22});
			createBlock("brick", {x: 13*22, y: 23*22});
			createBlock("brick", {x: 14*22, y: 23*22});
			createBlock("brick", {x: 11*22, y: 24*22});
			createBlock("brick", {x: 11*22, y: 25*22});
			createBlock("brick", {x: 14*22, y: 24*22});
			createBlock("brick", {x: 14*22, y: 25*22});

		}, 8000)
	}, 12000);
}

function bangEnemy(index) {
	createExplosion(objs.Enemy[index].pos);
	createEnemyRespawn(Math.floor(Math.random()*3), true);
	deleteUnderlay(objs.Enemy[index]);
	objs.Enemy.splice(index, 1);

	playSound(sounds.bangEnemy);
}

function freezeEnemy(enemy) {
	clearTimeout(freezeTimeOut);
	canEnemyMove = false;
	canEnemyShot = false;
	freezeTimeOut = setTimeout (function () {
		canEnemyMove = true;
		canEnemyShot = true;
		enemy.timeOfExisting = 0;
	}, 10000);
}
function inputHandler () {
	var player = objs.Player[0];
	if (gameStat == "game") {
		if (window.input.isDown("LEFT")) {
			control (player, "LEFT");
			if (window.input.pressedKey == "RIGHT") control(player, "RIGHT", true);

		} else if (window.input.isDown("RIGHT")) {
			control(player, "RIGHT");
			if (window.input.pressedKey == "LEFT") control(player, "LEFT", true);

		} else if (window.input.isDown("DOWN")) {
			control(player, "DOWN");
			if (window.input.pressedKey == "UP") control(player, "UP", true);

		} else if (window.input.isDown("UP")) {
			control(player, "UP");

		} else if (player) {
			if(checkIceCollision(player)) {
				control(player, player.dir);
			}
			if (!player.guard) player.animProp.loop = false;
		}

		if (window.input.isDown("SPACE")) {
			if (player) {
				if (player.canShot) createBullet(player);
			}
		}

		if (window.input.isDown("ESC")) {
			gameStat = "escape";
			// alert("dsf");
		}

	} else if (gameStat == "nextStage") {

		$("button").on("click", function () {
			curtains.text = false;
			curtains.dir = "toOpen";
			resetGame();
			startGame(true, "game");

			var intro = resources.getFile("audio", "sounds/start-game.mp3");
			intro.volume = 0.5;
			intro.play();
		});
		
		if (window.input.isDown("SPACE")) {
			curtains.text = false;
			curtains.dir = "toOpen";
			resetGame();
			startGame(true, "game");

			var intro = resources.getFile("audio", "sounds/start-game.mp3");
			intro.volume = 0.5;
			intro.play();

		} else if(window.input.isDown("UP")) {
			if (input.pressed == false) {
				numOfStage++;
				input.pressed = true;

				if (numOfStage > 15) numOfStage = 1;

				setTimeout (function () {
					input.pressed = false;
				}, 120);
			}

		} else if(window.input.isDown("DOWN")) {
			if (input.pressed == false) {
				numOfStage--;
				input.pressed = true;

				if (numOfStage < 1) numOfStage = 15;

				setTimeout (function () {
					input.pressed = false;
				}, 120);
			}
		}

	} else if (gameStat == "menu") {

		$("#canvas").bind("click", function (e) {
			if (Number(e.offsetX) > 200 && Number(e.offsetX) < 450 && Number(e.offsetY) < 400 && Number(e.offsetY) > 350)  {
				curtains.dir = "toClose";
				newGame = true;
				curtainsMove();
				gameStat = "startGame";

				resetStats();
			}
		});

		if (window.input.isDown("SPACE")) {
			curtains.dir = "toClose";
			newGame = true;
			curtainsMove();
			gameStat = "startGame";

			resetStats();
		}
	}
}
function setBoundCollision (obj, canvas) {
	var has = 0;
	if (obj.pos.x <= 0) {
		obj.speed.left = 0;
		obj.pos.x = 0;
		has++;
	} else {
		obj.speed.left = obj.speed.permanent;
	}

	if (obj.pos.y < 0) {
		obj.speed.up = 0;
		obj.pos.y = 1;
		has++;
	} else {
		obj.speed.up = obj.speed.permanent;
	}

	if (obj.pos.y + obj.height > canvas.height) {
		obj.speed.down = 0;
		obj.pos.y = canvas.height - obj.height + 1;
		has++;
	} else {
		obj.speed.down = obj.speed.permanent;
	}

	if (obj.pos.x + obj.width > 572) {
		obj.speed.right = 0;
		obj.pos.x = 572 - obj.width + 1;
		has++;
	} else {
		obj.speed.right = obj.speed.permanent;
	}
	if (has) return true;
}

function canWalk(tank) {
	var obj, i;

	setBoundCollision(tank, canvas);

	if (tank.setCollisionWith(objs.Base[0])) return true;


	for (i = 0; i < objs.Block.length; i++) {
		obj = objs.Block[i];
		if (tank.setCollisionWith(obj))
			return true;
	}
}

function canMoveUnderlay (tank) {
	if (tank instanceof Player) {
		for (i = 0; i < objs.Enemy.length; i++) {
			obj = objs.Enemy[i];
			if (tank.underlay.setUnderlayCollisionWith(obj.underlay, true))
				return true;
		}

		for (i = 0; i < objs.Bonus.length; i++) {
			if (tank.underlay.setUnderlayCollisionWith(objs.Bonus[i], false)) {
				bonusEffect(objs.Bonus[i]);
				addPoints(objs.Bonus[i]);

				if (objs.Bonus[i].type == 6) playSound(sounds.lifeUp);
					else playSound(sounds.takeBonus);
				
				objs.Bonus.splice(i, 1);
			}
		}
	}

	if (tank instanceof Enemy) {
		for (i = 0; i < objs.Player.length; i++) {
			obj = objs.Player[i];
			if (tank.underlay.setUnderlayCollisionWith(obj.underlay, true))
				return true;
		}
		for (i = 0; i < objs.Enemy.length; i++) {
			obj = objs.Enemy[i];
			if (tank != obj && tank.underlay.setUnderlayCollisionWith(obj.underlay, true))
				return true;
		}
	}
}

function control (tank, dir, doubleSpeed) {
	if(!tank) return 0;
	var d = doubleSpeed ? 2 : 1;
	var leftOv_x, leftOv_y, pos_x, pos_y;
	tank.dir = dir;
	tank.animProp.loop = true;

	canWalk(tank);

	switch (dir) {
		case "UP": {
			if (tank.underlay.canGoUp) {

				tank.pos.y -= d*tank.speed.up;
				tank.pos.x = tank.underlay.pos.x;

				tank.underlay.newPos = {
					x: Math.round(tank.pos.x/22)*22, 
					y: Math.round(tank.pos.y/22)*22
				};

				canMoveUnderlay(tank);
				if (tank.underlay.canGoUp) {
					tank.underlay.pos = tank.underlay.newPos;
				}
			} else canMoveUnderlay(tank);
			break;
		}
		case "LEFT": {
			if (tank.underlay.canGoLeft) {

				tank.pos.x -= d*tank.speed.left; 
				tank.pos.y = tank.underlay.pos.y;

				tank.underlay.newPos = {
					x: Math.round(tank.pos.x/22)*22, 
					y: Math.round(tank.pos.y/22)*22
				};

				canMoveUnderlay(tank);
				if (tank.underlay.canGoLeft) {
					tank.underlay.pos = tank.underlay.newPos;
				}
			} else canMoveUnderlay(tank);
			break;
		}
		case "RIGHT": {
			if (tank.underlay.canGoRight) {

				tank.pos.x += d*tank.speed.right;
				tank.pos.y = tank.underlay.pos.y;

				tank.underlay.newPos = {
					x: Math.round(tank.pos.x/22)*22, 
					y: Math.round(tank.pos.y/22)*22
				};

				canMoveUnderlay(tank);
				if (tank.underlay.canGoRight) {
					tank.underlay.pos = tank.underlay.newPos;
				}
			} else canMoveUnderlay(tank);
			break;
		}

		case "DOWN": {
			if (tank.underlay.canGoDown) {

				tank.pos.y += d*tank.speed.down; 
				tank.pos.x = tank.underlay.pos.x;

				tank.underlay.newPos = {
					x: Math.round(tank.pos.x/22)*22, 
					y: Math.round(tank.pos.y/22)*22
				};

				canMoveUnderlay(tank);
				if (tank.underlay.canGoDown) {
					tank.underlay.pos = tank.underlay.newPos;
				}
			} else canMoveUnderlay(tank);
			break;
		}
	}
}

function checkIceCollision (tank) {
	var ice;
	for (var i = 0; i < objs.Ice.length; i++) {
		ice = objs.Ice[i];
		if (tank.setCollisionWith(ice)) {
			return true;
		}
	}
	return false;
}
function GameOverText (x, y) {
	this.x = x;
	this.y = y;
	this.speed = 2;
	this.color = "#004389";
}

GameOverText.prototype.goUp = function () {
	if (this.y > canvas.height/2) this.y -= this.speed;
}

function createGameOverText(x, y) {
	var text = new GameOverText(x, y);
	objs.GameOverText.push(text);
}

function clearScene () {
	context.clearRect(0, 0, canvas.width, canvas.height);
	context.fillStyle = "#000";
	context.fillRect(0, 0, canvas.width, canvas.height);
}

function showMenu (color) {
	context.drawImage(resources.getFile("img", "img/main-title.png"), 100, 130);

	context.fillStyle = color;
	context.font = "bold 28px Verdana";
	context.textAlign = "center";
	context.fillText("START GAME", canvas.width/2 , 360);

	context.fillStyle = "#fff";
	context.font = "normal 18px Verdana";
	context.fillText("Created on HTML5 Canvas and JS", canvas.width/2 , 500);
	context.fillText("by Russel Denford", canvas.width/2 , 530);

	context.font = "normal 20px Verdana";
	context.textAlign = "left";
	context.fillText("SCORE: " + totalPoints, 100, 90);
	context.textAlign = "right";
	context.fillText("HI-SCORE: " + hiScore, 550, 90);

	if (gameStat == "menu") {
		$("#canvas").bind("mousemove", function (e) {
				if (Number(e.offsetX) > 200 && Number(e.offsetX) < 450 && Number(e.offsetY) < 400 && Number(e.offsetY) > 350)  {
					hoverColor = "#C42300";
					$(this).css("cursor", "pointer");
				} else {
					hoverColor = "#fff";
					$(this).css("cursor", "default");
				}
		});
	} else {
    	$("#canvas").unbind("click");
    	$("#canvas").unbind("mousemove");
    	$("#canvas").css("cursor", "default");
    }
}

var animateVictory = false;
var victoryColor = "#fff";
function showVictoryText (color) {
	context.fillStyle = color;
	context.font = "bold 72px Verdana";
	context.textAlign = "center";
	context.verticalAlign = "middle";
	context.fillText("YOU WON!", canvas.width/2 , canvas.height/2 - 100);
	context.font = "normal 22px Verdana";
	context.fillText("YOUR SCORE: " + totalPoints, canvas.width/2 , canvas.height/2);
	animateVictory = true;
}

function victoryColorAnimate () {
	var colorSwitcher = 0;
	if (animateVictory) return 0;
	setInterval (function () {
		switch (colorSwitcher) {
			case 0: {
				victoryColor = "#fff";
				colorSwitcher++;
				break;
			}
			case 1: {
				victoryColor = "#C42300";
				colorSwitcher++;
				break;
			}
			case 2: {
				victoryColor = "#790073";
				colorSwitcher = 0;
				break;
			}
		}
	}, 40);
}

var hoverColor = "#fff";

function showStats () {
	if (!stage) return 0;

	// fill stat area
	context.fillStyle = "#747474";
	context.fillRect(mapSize, 0, canvas.width, canvas.height);

	// draw enemy units
	for(i = 0; i < stage.squad.length; i++) {
		context.drawImage(resources.getFile("img", "img/unit.png"), 594 + 22*(i%2), 22 + Math.floor(i/2)*22);
	}

	// draw player lifes
	context.fillStyle = "#080808";
    context.font = "bold 28px Verdana";
    context.textBaseline = "top";
    context.textAlign = "left";
    context.fillText("1P", 590 , 320);
    context.fillText(playerLifes, 610 , 347);
    context.drawImage(resources.getFile("img", "img/player-unit.png"), 588, 353);

    // draw number of stage
    context.fillText(numOfStage, 610, 498);
    context.drawImage(resources.getFile("img", "img/stage2.png"), 590, 462);

    // draw Game Over text
    if (objs.GameOverText[0]) {
    	context.fillStyle = "#C42300";
    	context.font = "bold 28px Verdana";
    	context.textBaseline = "middle";
    	context.textAlign = "center";
    	context.fillText("GAME", objs.GameOverText[0].x, objs.GameOverText[0].y);
    	context.fillText("OVER", objs.GameOverText[0].x, objs.GameOverText[0].y + 30);
    	objs.GameOverText[0].goUp();
    }

    // draw Points
    var point;
    for(var i = 0; i < objs.Points.length; i++) {
    	if(point = objs.Points[i]) {
    		context.fillStyle = "#fff";
    		context.font = "normal 17px Verdana";
    		context.textBaseline = "middle";
    		context.textAlign = "center";
    		context.fillText(point.points, point.pos.x + 22, point.pos.y + 22);
    	}
    }

    if (gameStat == "menu" || gameStat == "startGame") {
    	context.clearRect(0, 0, canvas.width, canvas.height);
		context.fillStyle = "#000";
		context.fillRect(0, 0, canvas.width, canvas.height);

    	showMenu(hoverColor);
    }

    if (gameStat == "victory") {
    	context.clearRect(0, 0, canvas.width, canvas.height);
		context.fillStyle = "#000";
		context.fillRect(0, 0, canvas.width, canvas.height);

    	showVictoryText(victoryColor);
    }

    // draw Curtains

    if(curtains.active) {
    	context.fillStyle = "#747474";
    	context.fillRect(0, curtains.y1, canvas.width, canvas.height);
    	context.fillRect(0, curtains.y2, canvas.width, canvas.height);
    	curtains.move(curtains.dir);
    }

    if(curtains.active && curtains.text) {
    	context.fillStyle = "#080808";
    	context.font = "bold 28px Verdana";
    	context.textBaseline = "middle";
    	context.textAlign = "center";
    	context.fillText("STAGE " + numOfStage, 286, canvas.height/2);
    }
}

// ==DRAW SCENE==
function drawScene (canvas, context) {

	var i, k, group, obj;
	var objsNameArr = 
	["Base", "Respawn", "PlayerRespawn", "Block", "Ice", "Bullet", "Player", "Enemy", "Tree", "Explosion", "Bonus"];

	for (i = 0; i < objsNameArr.length; i++) {
		group = objsNameArr[i];

		for (k = 0; k < objs[group].length; k++) {
			obj = objs[group][k];

			if (obj) {
				obj.draw();

				if (obj instanceof Enemy) botContol(obj);
				if (obj instanceof Bullet) bulletFly(obj);
			}
		}
	}
};
function Points (parent) {
	this.points = parent.points;
	this.pos = {x: parent.pos.x, y: parent.pos.y};
}

function addPoints (parent) {
	var point = new Points(parent);
	totalPoints += point.points;

	$("span").text(totalPoints);
	
	setTimeout(function () {
		objs.Points.push(point);
	}, 400);

	setTimeout(function () {
		for (var i = 0; i < objs.Points.length; i++) {
			if (point == objs.Points[i]) objs.Points.splice(i, 1);
		}
	}, 1000);
}
function Stage (n) {
	this.map = getMap(n);
	this.squad = getBotSquad(n, numOfEnemy);
}

function createMap (stage, nextStage) {
	var i, j, x, y, type, order = 0;
	var step = 22;

	createBase({x: 264, y: 528});

	if(nextStage) {
		setTimeout (function () {
			createPlayerRespawn(2);

			for (i = 0; i < 4; i++) {
				createEnemyRespawn(order, true);
				order++;
			}

		}, 800);
	} else {
		createPlayerRespawn(2);

		for (i = 0; i < 4; i++) {
			createEnemyRespawn(order, true);
			order++;
		}
	}


	for (i = 0; i < stage.map.length; i++) {
		for(j = 0; j < stage.map.length; j++) {
			x = j*step;
			y = i*step;
			switch (stage.map[i][j]) {
				case 0: {
					continue;
					break;
				}

				case 1: {
					createBlock("brick", {x: x, y: y});
					break;
				}

				case 2: {
					createBlock("steelBrick", {x: x, y: y});
					break;
				}

				case 3: {
					createBlock("tree", {x: x, y: y});
					break;
				}

				case 4: {
					createBlock("water", {x: x, y: y});
					break;	
				}
				case 5: {
					createBlock("ice", {x: x, y: y});
					break;	
				}
			}
		}
	}
}
var canvas, context, stage, objs;
var playerAnimSpeed = 45;
var playerSpeed = 2;
var playerBulletSpeed = 4.5;
var playerLifes = 2;
var playerRank = 1;
var totalPoints = 0;
var hiScore = getCookie("hiScore") ? getCookie("hiScore") : 0;
var simpleEnemySpeed = 1.5;
var heavyEnemySpeed = 1.3;
var btrEnemySpeed = 4;
var numOfStage = 1;
var numOfEnemy = 20;
var mapSize = 572;
var gameStat = "menu";
var canEnemyShot = true;
var canEnemyMove = true;
var freezeTimeOut, guardTimeOut, baseDefenseTimeOut, baseDefenseTimeOutWarning;
var ifGame = true;

function playSound (src, volume) {
	var audio = new Audio();
	audio.src = src;
	audio.play();
	audio.volume = volume ? volume : 1;
}

var sounds = {
	bangEnemy: "sounds/tank-bang.mp3",
	bonusAppear: "sounds/bonus-appear.mp3",
	takeBonus: "sounds/take-bonus.mp3",
	damage: "sounds/damage.mp3",
	shot: "sounds/shot.mp3",
	bulletCol: "sounds/bullet-col.mp3",
	playerFail: "sounds/player-fail.mp3",
	lifeUp: "sounds/life-up.mp3",
	moving: "sounds/moving.mp3",
	intro: "sounds/start-game.mp3",
	gameOver: "sounds/game-over.mp3",
	destroy: "sounds/brick-destroy.mp3",
	won: "sounds/won.mp3"
}

function setCookie (name, value) {
      document.cookie = name + "=" + value;
}

function getCookie(name) {
	var cookie = " " + document.cookie;
	var search = " " + name + "=";
	var setStr = null;
	var offset = 0;
	var end = 0;
	if (cookie.length > 0) {
		offset = cookie.indexOf(search);
		if (offset != -1) {
			offset += search.length;
			end = cookie.indexOf(";", offset)
			if (end == -1) {
				end = cookie.length;
			}
			setStr = unescape(cookie.substring(offset, end));
		}
	}
	return(setStr);
}

function checkGameStat () {
	switch(gameStat) {
		case "game": {
			if (!stage.squad.length && !objs.Enemy.length && ifGame && objs.Base[0].state == "unbroken") {
				ifGame = false;
				setTimeout(function () {
					gameStat = "win";
				}, 5000);
			}
			break;
		}
		case "over": {
			if (!objs.GameOverText.length) {
				createGameOverText(286, 600);
			}

			if (totalPoints > hiScore) {
				setCookie("hiScore", totalPoints);
				hiScore = totalPoints;
			}

			gameStat = "waitForMenu";

			setTimeout(function() {
				playSound(sounds.gameOver);
			}, 2600);

			setTimeout(function() {
				curtains.dir = "toClose";
				curtainsMove();
			}, 4500);
			break;
		}
		case "win": {
			if (numOfStage == 15) {
				gameStat = "victory";
				playSound(sounds.won);
				victoryColorAnimate();
				setTimeout(function() {
					curtains.dir = "toClose";
					curtainsMove();
				}, 8400);

			} else {
				gameStat = "showNumOfStage";
				setTimeout(function() {
					curtains.dir = "toClose"
					curtainsMove();
				}, 750);
			}	
			break;
		}

		case "victory": {
			if(curtains.state == "finished") {
				gameStat = "waitForMenu"
			}
			break;
		}

		case "showNumOfStage": {
			if(curtains.state == "finished") {
				numOfStage++;
				curtains.text = true;
				gameStat = "nextStage";	
			}
			break;
		}

		case "startGame": {
			if(curtains.state == "finished") {
				curtains.text = true;
				gameStat = "nextStage";	
			}
			break;
		}

		case "waitForMenu": {
			if(curtains.state == "finished") {
				numOfStage = 1;
				curtains.dir = "toOpen";
				gameStat = "menu";
				curtainsMove();
			}
			break;
		}

		case "escape": {
			if (totalPoints > hiScore) {
				setCookie("hiScore", totalPoints);
				hiScore = totalPoints;
			}

			gameStat = "waitForMenu";
			setTimeout(function() {
				curtains.dir = "toClose";
				curtainsMove();
			}, 500);
			break;
		}

		case "menu": {
			resetGame();
			startGame(false, "menu");
		}

		default: {
		}
	}

	if (gameStat != "game") {
		if (objs.Player[0]) {
			if (!objs.Player[0].guard) objs.Player[0].animProp.loop = false;
		}
	}
}

function renderingLoop () {
	if (window.requestAnimationFrame)
        window.requestAnimationFrame(renderingLoop);
    else if (window.msRequestAnimationFrame)
        window.msRequestAnimationFrame(renderingLoop);
    else if (window.webkitRequestAnimationFrame)
        window.waterbkitRequestAnimationFrame(renderingLoop);
    else if (window.mozRequestAnimationFrame)
        window.mozRequestAnimationFrame(renderingLoop);
    else if (window.oRequestAnimationFrame)
        window.oRequestAnimationFrame(renderingLoop);

    inputHandler();
    clearScene();
    drawScene(canvas, context);
    showStats();
    checkGameStat();
}

$(function () {

	canvas = document.getElementById('canvas');
	context = canvas.getContext("2d");

	objs = {Underlay: [], Base: [], Explosion: [], Respawn: [], PlayerRespawn: [], Player: [], 
		Block: [], Tree: [], Ice: [], Bullet: [], Bonus: [], Enemy: [], Points: [], GameOverText: []};

	startGame(false, "menu");
	renderingLoop();
});

function startGame (nextStage, stat) {
	gameStat = stat;
	ifGame = true;

	stage = new Stage(numOfStage);
	if (gameStat == "game") {
		createMap(stage, nextStage);
	}
}

function resetGame (fullReset) {
	objs = {Underlay: [], Base: [], Explosion: [], Respawn: [], PlayerRespawn: [], Player: [], 
		Block: [], Tree: [], Ice: [], Bullet: [], Bonus: [], Enemy: [], Points: [], GameOverText: []};

	stage = undefined;
	animateVictory = false;

	var maxInterval = setInterval(function () {}, 100);
	while (maxInterval--) {
	    clearInterval(maxInterval);
	}

	var maxTimeout = setTimeout(function () {});
	while (maxTimeout--) {
	    clearTimeout(maxTimeout);
	}
}

function resetStats () {
	playerLifes = 2;
	playerRank = 1;
	totalPoints = 0;
	numOfStage = 1;
}